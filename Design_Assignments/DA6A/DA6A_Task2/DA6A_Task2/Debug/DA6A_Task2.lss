
DA6A_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000f90  00001024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800106  00800106  0000102a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001088  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001128  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068f  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000033a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000387  00000000  00000000  00003b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003eb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	ff e0       	ldi	r31, 0x0F	; 15
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ac 33       	cpi	r26, 0x3C	; 60
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 49 03 	call	0x692	; 0x692 <main>
  ea:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2cInit>:
volatile float pitch = 0;
volatile float roll = 0;

void i2cInit(void)
{
	TWBR0 = BITRATE;						//set bitrate
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWSR0 |= (0<<TWPS1)|(0<<TWPS0);			//set prescaler to 1
  f8:	e9 eb       	ldi	r30, 0xB9	; 185
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <i2cRead>:
}

unsigned char i2cRead(value)
{
	if (value == 0)									//ack bit & continue
 102:	89 2b       	or	r24, r25
 104:	21 f4       	brne	.+8      	; 0x10e <i2cRead+0xc>
	{
		TWCR0= (1<<TWINT) | (1<<TWEN) | (1<<TWEA);   //enable TWI/ACK and clear flag
 106:	84 ec       	ldi	r24, 0xC4	; 196
 108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 10c:	03 c0       	rjmp	.+6      	; 0x114 <i2cRead+0x12>
	}
	else
	{
		TWCR0= (1<<TWINT) | (1<<TWEN);   	//enable TWI & clear flag
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	}
	while ((TWCR0& (1<<TWINT)) == 0);     	//wait until emptied
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <i2cRead+0x16>
	return TWDR0;							//return value to TWDR
 11e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 122:	08 95       	ret

00000124 <i2cWrite>:

void i2cWrite(data)
{
	TWDR0 = data;                   			//pull data from TWI register
 124:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWINT) | (1<<TWEN);			//enable TWI & clear flag
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while ((TWCR0&(1<<TWINT)) == 0);   		//wait until done
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	ec f7       	brge	.-6      	; 0x132 <i2cWrite+0xe>
}
 138:	08 95       	ret

0000013a <i2cStart>:

void i2cStart(void)
{
	TWCR0= (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);		//enable TWI, clear flag, start condition
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	84 ea       	ldi	r24, 0xA4	; 164
 140:	80 83       	st	Z, r24
	while (TWCR0 & (1<<TWINT) == 0);            	//wait until emptied
 142:	80 81       	ld	r24, Z
 144:	08 95       	ret

00000146 <i2cStop>:
}
void i2cStop(void)
{
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);	//enable TWI, clear flag, stop condition
 146:	84 e9       	ldi	r24, 0x94	; 148
 148:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while ((TWCR0&(1<<TWINT)) == 0);				//wait until done
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	ec f7       	brge	.-6      	; 0x150 <i2cStop+0xa>
}
 156:	08 95       	ret

00000158 <i2cIdle>:

void i2cIdle(char slave_write_address)				//taken from Dr. Venkis I2C start wait function in Demo code
{
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	b8 2e       	mov	r11, r24
	uint8_t check;									/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start condition and clear interrupt flag */
 16c:	cc eb       	ldi	r28, 0xBC	; 188
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	0f 2e       	mov	r0, r31
 172:	f4 ea       	ldi	r31, 0xA4	; 164
 174:	df 2e       	mov	r13, r31
 176:	f0 2d       	mov	r31, r0
		while (!(TWCR0 & (1<<TWINT)));				/* Wait until TWI finish its current job (start condition) */
		check = TWSR0 & 0xF8;						/* Read TWI status register with masking lower three bits */
 178:	09 eb       	ldi	r16, 0xB9	; 185
 17a:	10 e0       	ldi	r17, 0x00	; 0
		if (check != 0x08)							/* Check weather start condition transmitted successfully or not? */
		continue;									/* If no then continue with start loop again */
		TWDR0 = slave_write_address;				/* If yes then write SLA+W in TWI data register */
 17c:	0f 2e       	mov	r0, r31
 17e:	fb eb       	ldi	r31, 0xBB	; 187
 180:	ef 2e       	mov	r14, r31
 182:	f1 2c       	mov	r15, r1
 184:	f0 2d       	mov	r31, r0
		TWCR0 = (1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
 186:	0f 2e       	mov	r0, r31
 188:	f4 e8       	ldi	r31, 0x84	; 132
 18a:	cf 2e       	mov	r12, r31
 18c:	f0 2d       	mov	r31, r0
void i2cIdle(char slave_write_address)				//taken from Dr. Venkis I2C start wait function in Demo code
{
	uint8_t check;									/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start condition and clear interrupt flag */
 18e:	d8 82       	st	Y, r13
		while (!(TWCR0 & (1<<TWINT)));				/* Wait until TWI finish its current job (start condition) */
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <i2cIdle+0x38>
		check = TWSR0 & 0xF8;						/* Read TWI status register with masking lower three bits */
 196:	f8 01       	movw	r30, r16
 198:	80 81       	ld	r24, Z
		if (check != 0x08)							/* Check weather start condition transmitted successfully or not? */
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	b9 f7       	brne	.-18     	; 0x18e <i2cIdle+0x36>
		continue;									/* If no then continue with start loop again */
		TWDR0 = slave_write_address;				/* If yes then write SLA+W in TWI data register */
 1a0:	f7 01       	movw	r30, r14
 1a2:	b0 82       	st	Z, r11
		TWCR0 = (1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
 1a4:	c8 82       	st	Y, r12
		while (!(TWCR0 & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 1a6:	88 81       	ld	r24, Y
 1a8:	88 23       	and	r24, r24
 1aa:	ec f7       	brge	.-6      	; 0x1a6 <i2cIdle+0x4e>
		check = TWSR0 & 0xF8;						/* Read TWI status register with masking lower three bits */
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 81       	ld	r24, Z
		if (check != 0x18 )							/* Check weather SLA+W transmitted & ack received or not? */
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 31       	cpi	r24, 0x18	; 24
 1b4:	19 f0       	breq	.+6      	; 0x1bc <i2cIdle+0x64>
		{
			i2cStop();								/* If not then generate stop condition */
 1b6:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>
			continue;								/* continue with start loop again */
 1ba:	e9 cf       	rjmp	.-46     	; 0x18e <i2cIdle+0x36>
		}
		break;										/* If yes then break loop */
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	08 95       	ret

000001d0 <initializeUART>:

void initializeUART()
{
	DDRD |= 0x02;
 1d0:	51 9a       	sbi	0x0a, 1	; 10
	UBRR0 = 103;
 1d2:	87 e6       	ldi	r24, 0x67	; 103
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0C |= (0<<UPM01) | (0<<UPM00) | (1<<UCSZ01) | (1<<UCSZ00);  //disable parity and set to asynchronous
 1de:	e2 ec       	ldi	r30, 0xC2	; 194
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	86 60       	ori	r24, 0x06	; 6
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <USART_tx_transmit>:
}

void USART_tx_transmit()
{
	UBRR0 = 103;
 1ea:	87 e6       	ldi	r24, 0x67	; 103
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B |= (1 << TXCIE0) | (1<<TXEN0);		//enable data transmission
 1f6:	e1 ec       	ldi	r30, 0xC1	; 193
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	88 64       	ori	r24, 0x48	; 72
 1fe:	80 83       	st	Z, r24
	DDRD |= 0x02;								//transmit through PD2
 200:	51 9a       	sbi	0x0a, 1	; 10
 202:	08 95       	ret

00000204 <USART_tx>:
}

void USART_tx(char*data)						//outputs data to terminal
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
	while((*data != '\0'))						//loop until all data is emptied
 208:	fc 01       	movw	r30, r24
 20a:	20 81       	ld	r18, Z
 20c:	22 23       	and	r18, r18
 20e:	69 f0       	breq	.+26     	; 0x22a <USART_tx+0x26>
 210:	dc 01       	movw	r26, r24
 212:	11 96       	adiw	r26, 0x01	; 1
	{
		while(!(UCSR0A & (1 << UDRE0)));		//wait until data register in emptied
 214:	e0 ec       	ldi	r30, 0xC0	; 192
 216:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;							//once emptied, import into data register UDR0
 218:	c6 ec       	ldi	r28, 0xC6	; 198
 21a:	d0 e0       	ldi	r29, 0x00	; 0

void USART_tx(char*data)						//outputs data to terminal
{
	while((*data != '\0'))						//loop until all data is emptied
	{
		while(!(UCSR0A & (1 << UDRE0)));		//wait until data register in emptied
 21c:	90 81       	ld	r25, Z
 21e:	95 ff       	sbrs	r25, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <USART_tx+0x18>
		UDR0 = *data;							//once emptied, import into data register UDR0
 222:	28 83       	st	Y, r18
	DDRD |= 0x02;								//transmit through PD2
}

void USART_tx(char*data)						//outputs data to terminal
{
	while((*data != '\0'))						//loop until all data is emptied
 224:	2d 91       	ld	r18, X+
 226:	21 11       	cpse	r18, r1
 228:	f9 cf       	rjmp	.-14     	; 0x21c <USART_tx+0x18>
	{
		while(!(UCSR0A & (1 << UDRE0)));		//wait until data register in emptied
		UDR0 = *data;							//once emptied, import into data register UDR0
		data++;									//increments pointer position for data
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <gyroInit>:

void gyroInit()
{
	i2cIdle(SLAVE_ADDRESS);			//start condition at slave address
 230:	80 ed       	ldi	r24, 0xD0	; 208
 232:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(DIVIDER_ADDRESS);		//write to sampling rate register
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cWrite(0x07);					//set sampling rate to 1kHz
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cStop();						//stop condition
 246:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>

	i2cIdle(SLAVE_ADDRESS);			//set power & start condition at slave address
 24a:	80 ed       	ldi	r24, 0xD0	; 208
 24c:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(POWER_ADDRESS);		//write to that address
 250:	8b e6       	ldi	r24, 0x6B	; 107
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cWrite(0x01);					//PLL with X axis gyroscope reference
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cStop();						//stop condition
 260:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>

	i2cIdle(SLAVE_ADDRESS);			//start condition at slave address
 264:	80 ed       	ldi	r24, 0xD0	; 208
 266:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(CONFIG_ADDRESS);		//write to that address
 26a:	8a e1       	ldi	r24, 0x1A	; 26
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cWrite(0x00);					//set sampling rate to 8kHz
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cStop();						//stop condition
 27a:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>

	i2cIdle(SLAVE_ADDRESS);			//start condition at slave address
 27e:	80 ed       	ldi	r24, 0xD0	; 208
 280:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(GYRO_CONFIG_ADDRESS);	//write to that address
 284:	8b e1       	ldi	r24, 0x1B	; 27
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cWrite(0x18);					//set range
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cStop();						//stop condition
 294:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>

	i2cIdle(SLAVE_ADDRESS);			//start condition at slave address
 298:	80 ed       	ldi	r24, 0xD0	; 208
 29a:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(INTERRUPT_ADDRESS);	//write to interrupt register address
 29e:	88 e3       	ldi	r24, 0x38	; 56
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cWrite(0x01);					//toggle DATA_RDY_EN
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	i2cStop();						//stop condition
 2ae:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>
 2b2:	08 95       	ret

000002b4 <Read_RawValue>:
		_delay_ms(250);
	}
}

void Read_RawValue()
{
 2b4:	cf 93       	push	r28
	i2cIdle(SLAVE_ADDRESS);			//start condition
 2b6:	80 ed       	ldi	r24, 0xD0	; 208
 2b8:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(ACC_START_ADDRESS);	//set acc address
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	
	i2cStart();						//read acc data
 2c4:	0e 94 9d 00 	call	0x13a	; 0x13a <i2cStart>
	Acc_x = (((int)i2cRead()<<8) | (int)i2cRead());
 2c8:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 2cc:	c8 2f       	mov	r28, r24
 2ce:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 2d2:	6c 2f       	mov	r22, r28
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	76 2f       	mov	r23, r22
 2d8:	66 27       	eor	r22, r22
 2da:	68 2b       	or	r22, r24
 2dc:	07 2e       	mov	r0, r23
 2de:	00 0c       	add	r0, r0
 2e0:	88 0b       	sbc	r24, r24
 2e2:	99 0b       	sbc	r25, r25
 2e4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 2e8:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <Acc_x>
 2ec:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <Acc_x+0x1>
 2f0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Acc_x+0x2>
 2f4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Acc_x+0x3>
	Acc_y = (((int)i2cRead()<<8) | (int)i2cRead());
 2f8:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 2fc:	c8 2f       	mov	r28, r24
 2fe:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 302:	6c 2f       	mov	r22, r28
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	76 2f       	mov	r23, r22
 308:	66 27       	eor	r22, r22
 30a:	68 2b       	or	r22, r24
 30c:	07 2e       	mov	r0, r23
 30e:	00 0c       	add	r0, r0
 310:	88 0b       	sbc	r24, r24
 312:	99 0b       	sbc	r25, r25
 314:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 318:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <Acc_y>
 31c:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <Acc_y+0x1>
 320:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Acc_y+0x2>
 324:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Acc_y+0x3>
	Acc_z = (((int)i2cRead()<<8) | (int)i2cRead());
 328:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 32c:	c8 2f       	mov	r28, r24
 32e:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 332:	6c 2f       	mov	r22, r28
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	76 2f       	mov	r23, r22
 338:	66 27       	eor	r22, r22
 33a:	68 2b       	or	r22, r24
 33c:	07 2e       	mov	r0, r23
 33e:	00 0c       	add	r0, r0
 340:	88 0b       	sbc	r24, r24
 342:	99 0b       	sbc	r25, r25
 344:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 348:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Acc_z>
 34c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Acc_z+0x1>
 350:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Acc_z+0x2>
 354:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Acc_z+0x3>
	i2cStop();						//stop condition
 358:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>
	
	i2cIdle(SLAVE_ADDRESS);			//start condition
 35c:	80 ed       	ldi	r24, 0xD0	; 208
 35e:	0e 94 ac 00 	call	0x158	; 0x158 <i2cIdle>
	i2cWrite(GYRO_START_ADDRESS);	//set gyro address
 362:	83 e4       	ldi	r24, 0x43	; 67
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	
	i2cStart();						//read gyro data
 36a:	0e 94 9d 00 	call	0x13a	; 0x13a <i2cStart>
	i2cWrite(SLAVE_ADDRESS);
 36e:	80 ed       	ldi	r24, 0xD0	; 208
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 92 00 	call	0x124	; 0x124 <i2cWrite>
	Gyro_x = (((int)i2cRead()<<8) | (int)i2cRead());
 376:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 37a:	c8 2f       	mov	r28, r24
 37c:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 380:	6c 2f       	mov	r22, r28
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	76 2f       	mov	r23, r22
 386:	66 27       	eor	r22, r22
 388:	68 2b       	or	r22, r24
 38a:	07 2e       	mov	r0, r23
 38c:	00 0c       	add	r0, r0
 38e:	88 0b       	sbc	r24, r24
 390:	99 0b       	sbc	r25, r25
 392:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 396:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <Gyro_x>
 39a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <Gyro_x+0x1>
 39e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Gyro_x+0x2>
 3a2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Gyro_x+0x3>
	Gyro_y = (((int)i2cRead()<<8) | (int)i2cRead());
 3a6:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 3aa:	c8 2f       	mov	r28, r24
 3ac:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 3b0:	6c 2f       	mov	r22, r28
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	76 2f       	mov	r23, r22
 3b6:	66 27       	eor	r22, r22
 3b8:	68 2b       	or	r22, r24
 3ba:	07 2e       	mov	r0, r23
 3bc:	00 0c       	add	r0, r0
 3be:	88 0b       	sbc	r24, r24
 3c0:	99 0b       	sbc	r25, r25
 3c2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 3c6:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <Gyro_y>
 3ca:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <Gyro_y+0x1>
 3ce:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <Gyro_y+0x2>
 3d2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <Gyro_y+0x3>
	Gyro_z = (((int)i2cRead()<<8) | (int)i2cRead());
 3d6:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 3da:	c8 2f       	mov	r28, r24
 3dc:	0e 94 81 00 	call	0x102	; 0x102 <i2cRead>
 3e0:	6c 2f       	mov	r22, r28
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	76 2f       	mov	r23, r22
 3e6:	66 27       	eor	r22, r22
 3e8:	68 2b       	or	r22, r24
 3ea:	07 2e       	mov	r0, r23
 3ec:	00 0c       	add	r0, r0
 3ee:	88 0b       	sbc	r24, r24
 3f0:	99 0b       	sbc	r25, r25
 3f2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__floatsisf>
 3f6:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <Gyro_z>
 3fa:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <Gyro_z+0x1>
 3fe:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Gyro_z+0x2>
 402:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Gyro_z+0x3>
	i2cStop();						//stop condition
 406:	0e 94 a3 00 	call	0x146	; 0x146 <i2cStop>
}
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <sendData>:

void sendData()
{
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	e2 97       	sbiw	r28, 0x32	; 50
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
	char array[50];		//array data is input into
	Ax = Acc_x/16384.0;		//scale collected value
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e8       	ldi	r20, 0x80	; 128
 432:	58 e3       	ldi	r21, 0x38	; 56
 434:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <Acc_x>
 438:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <Acc_x+0x1>
 43c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Acc_x+0x2>
 440:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Acc_x+0x3>
 444:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__mulsf3>
 448:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <Ax>
 44c:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <Ax+0x1>
 450:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Ax+0x2>
 454:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Ax+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Ax);	//send to UART
 458:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ax>
 45c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ax+0x1>
 460:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <Ax+0x2>
 464:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <Ax+0x3>
 468:	bf 93       	push	r27
 46a:	af 93       	push	r26
 46c:	9f 93       	push	r25
 46e:	8f 93       	push	r24
 470:	0f 2e       	mov	r0, r31
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	ef 2e       	mov	r14, r31
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	ff 2e       	mov	r15, r31
 47a:	f0 2d       	mov	r31, r0
 47c:	ff 92       	push	r15
 47e:	ef 92       	push	r14
 480:	1f 92       	push	r1
 482:	0f 2e       	mov	r0, r31
 484:	f2 e3       	ldi	r31, 0x32	; 50
 486:	df 2e       	mov	r13, r31
 488:	f0 2d       	mov	r31, r0
 48a:	df 92       	push	r13
 48c:	8e 01       	movw	r16, r28
 48e:	0f 5f       	subi	r16, 0xFF	; 255
 490:	1f 4f       	sbci	r17, 0xFF	; 255
 492:	1f 93       	push	r17
 494:	0f 93       	push	r16
 496:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
	
	Ay = Acc_y/16384.0;
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e8       	ldi	r20, 0x80	; 128
 4a6:	58 e3       	ldi	r21, 0x38	; 56
 4a8:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Acc_y>
 4ac:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <Acc_y+0x1>
 4b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Acc_y+0x2>
 4b4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Acc_y+0x3>
 4b8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__mulsf3>
 4bc:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <Ay>
 4c0:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <Ay+0x1>
 4c4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Ay+0x2>
 4c8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Ay+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Ay);
 4cc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Ay>
 4d0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Ay+0x1>
 4d4:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <Ay+0x2>
 4d8:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <Ay+0x3>
 4dc:	bf 93       	push	r27
 4de:	af 93       	push	r26
 4e0:	9f 93       	push	r25
 4e2:	8f 93       	push	r24
 4e4:	ff 92       	push	r15
 4e6:	ef 92       	push	r14
 4e8:	1f 92       	push	r1
 4ea:	df 92       	push	r13
 4ec:	1f 93       	push	r17
 4ee:	0f 93       	push	r16
 4f0:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 4f4:	c8 01       	movw	r24, r16
 4f6:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
	
	Az = Acc_z/16384.0;
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	40 e8       	ldi	r20, 0x80	; 128
 500:	58 e3       	ldi	r21, 0x38	; 56
 502:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Acc_z>
 506:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Acc_z+0x1>
 50a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Acc_z+0x2>
 50e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Acc_z+0x3>
 512:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__mulsf3>
 516:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <Az>
 51a:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <Az+0x1>
 51e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Az+0x2>
 522:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Az+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Az);
 526:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Az>
 52a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Az+0x1>
 52e:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <Az+0x2>
 532:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <Az+0x3>
 536:	bf 93       	push	r27
 538:	af 93       	push	r26
 53a:	9f 93       	push	r25
 53c:	8f 93       	push	r24
 53e:	ff 92       	push	r15
 540:	ef 92       	push	r14
 542:	1f 92       	push	r1
 544:	df 92       	push	r13
 546:	1f 93       	push	r17
 548:	0f 93       	push	r16
 54a:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 54e:	c8 01       	movw	r24, r16
 550:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
	
	Gx = Gyro_x/16.4;
 554:	23 e3       	ldi	r18, 0x33	; 51
 556:	33 e3       	ldi	r19, 0x33	; 51
 558:	43 e8       	ldi	r20, 0x83	; 131
 55a:	51 e4       	ldi	r21, 0x41	; 65
 55c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Gyro_x>
 560:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Gyro_x+0x1>
 564:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Gyro_x+0x2>
 568:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Gyro_x+0x3>
 56c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__divsf3>
 570:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <Gx>
 574:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <Gx+0x1>
 578:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Gx+0x2>
 57c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Gx+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Gx);
 580:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Gx>
 584:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Gx+0x1>
 588:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <Gx+0x2>
 58c:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <Gx+0x3>
 590:	bf 93       	push	r27
 592:	af 93       	push	r26
 594:	9f 93       	push	r25
 596:	8f 93       	push	r24
 598:	ff 92       	push	r15
 59a:	ef 92       	push	r14
 59c:	1f 92       	push	r1
 59e:	df 92       	push	r13
 5a0:	1f 93       	push	r17
 5a2:	0f 93       	push	r16
 5a4:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	c8 01       	movw	r24, r16
 5b4:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
	
	Gy = Gyro_y/16.4;
 5b8:	23 e3       	ldi	r18, 0x33	; 51
 5ba:	33 e3       	ldi	r19, 0x33	; 51
 5bc:	43 e8       	ldi	r20, 0x83	; 131
 5be:	51 e4       	ldi	r21, 0x41	; 65
 5c0:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Gyro_y>
 5c4:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <Gyro_y+0x1>
 5c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Gyro_y+0x2>
 5cc:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Gyro_y+0x3>
 5d0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__divsf3>
 5d4:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <Gy>
 5d8:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <Gy+0x1>
 5dc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Gy+0x2>
 5e0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Gy+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Gy);
 5e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Gy>
 5e8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Gy+0x1>
 5ec:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <Gy+0x2>
 5f0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <Gy+0x3>
 5f4:	bf 93       	push	r27
 5f6:	af 93       	push	r26
 5f8:	9f 93       	push	r25
 5fa:	8f 93       	push	r24
 5fc:	ff 92       	push	r15
 5fe:	ef 92       	push	r14
 600:	1f 92       	push	r1
 602:	df 92       	push	r13
 604:	1f 93       	push	r17
 606:	0f 93       	push	r16
 608:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 60c:	c8 01       	movw	r24, r16
 60e:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
	
	Gz = Gyro_z/16.4;
 612:	23 e3       	ldi	r18, 0x33	; 51
 614:	33 e3       	ldi	r19, 0x33	; 51
 616:	43 e8       	ldi	r20, 0x83	; 131
 618:	51 e4       	ldi	r21, 0x41	; 65
 61a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Gyro_z>
 61e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <Gyro_z+0x1>
 622:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Gyro_z+0x2>
 626:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Gyro_z+0x3>
 62a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__divsf3>
 62e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 632:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 636:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 63a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
	snprintf(array,sizeof(array), "%f\r\n", Gz);
 63e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 642:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 646:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 64a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 64e:	bf 93       	push	r27
 650:	af 93       	push	r26
 652:	9f 93       	push	r25
 654:	8f 93       	push	r24
 656:	ff 92       	push	r15
 658:	ef 92       	push	r14
 65a:	1f 92       	push	r1
 65c:	df 92       	push	r13
 65e:	1f 93       	push	r17
 660:	0f 93       	push	r16
 662:	0e 94 ce 04 	call	0x99c	; 0x99c <snprintf>
	USART_tx(array);
 666:	c8 01       	movw	r24, r16
 668:	0e 94 02 01 	call	0x204	; 0x204 <USART_tx>
}
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	e2 96       	adiw	r28, 0x32	; 50
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	08 95       	ret

00000692 <main>:
	i2cStop();						//stop condition
}

int main()
{
	i2cInit();                  //initializing functions
 692:	0e 94 79 00 	call	0xf2	; 0xf2 <i2cInit>
	i2cStart();
 696:	0e 94 9d 00 	call	0x13a	; 0x13a <i2cStart>
	USART_tx_transmit();
 69a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_tx_transmit>
	initializeUART();
 69e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <initializeUART>
	gyroInit();
 6a2:	0e 94 18 01 	call	0x230	; 0x230 <gyroInit>
	
	while(1)
	{
		Read_RawValue();		//read in data
 6a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Read_RawValue>
		sendData();				//output data to UART
 6aa:	0e 94 07 02 	call	0x40e	; 0x40e <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	84 e3       	ldi	r24, 0x34	; 52
 6b2:	9c e0       	ldi	r25, 0x0C	; 12
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	90 40       	sbci	r25, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x22>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x2c>
 6be:	00 00       	nop
 6c0:	f2 cf       	rjmp	.-28     	; 0x6a6 <main+0x14>

000006c2 <__divsf3>:
 6c2:	0e 94 75 03 	call	0x6ea	; 0x6ea <__divsf3x>
 6c6:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 6ca:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 6ce:	58 f0       	brcs	.+22     	; 0x6e6 <__divsf3+0x24>
 6d0:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 6d4:	40 f0       	brcs	.+16     	; 0x6e6 <__divsf3+0x24>
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <__divsf3+0x20>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	29 f0       	breq	.+10     	; 0x6e6 <__divsf3+0x24>
 6dc:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 6e0:	51 11       	cpse	r21, r1
 6e2:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 6e6:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>

000006ea <__divsf3x>:
 6ea:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 6ee:	68 f3       	brcs	.-38     	; 0x6ca <__divsf3+0x8>

000006f0 <__divsf3_pse>:
 6f0:	99 23       	and	r25, r25
 6f2:	b1 f3       	breq	.-20     	; 0x6e0 <__divsf3+0x1e>
 6f4:	55 23       	and	r21, r21
 6f6:	91 f3       	breq	.-28     	; 0x6dc <__divsf3+0x1a>
 6f8:	95 1b       	sub	r25, r21
 6fa:	55 0b       	sbc	r21, r21
 6fc:	bb 27       	eor	r27, r27
 6fe:	aa 27       	eor	r26, r26
 700:	62 17       	cp	r22, r18
 702:	73 07       	cpc	r23, r19
 704:	84 07       	cpc	r24, r20
 706:	38 f0       	brcs	.+14     	; 0x716 <__divsf3_pse+0x26>
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	44 1f       	adc	r20, r20
 712:	aa 1f       	adc	r26, r26
 714:	a9 f3       	breq	.-22     	; 0x700 <__divsf3_pse+0x10>
 716:	35 d0       	rcall	.+106    	; 0x782 <__divsf3_pse+0x92>
 718:	0e 2e       	mov	r0, r30
 71a:	3a f0       	brmi	.+14     	; 0x72a <__divsf3_pse+0x3a>
 71c:	e0 e8       	ldi	r30, 0x80	; 128
 71e:	32 d0       	rcall	.+100    	; 0x784 <__divsf3_pse+0x94>
 720:	91 50       	subi	r25, 0x01	; 1
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	e6 95       	lsr	r30
 726:	00 1c       	adc	r0, r0
 728:	ca f7       	brpl	.-14     	; 0x71c <__divsf3_pse+0x2c>
 72a:	2b d0       	rcall	.+86     	; 0x782 <__divsf3_pse+0x92>
 72c:	fe 2f       	mov	r31, r30
 72e:	29 d0       	rcall	.+82     	; 0x782 <__divsf3_pse+0x92>
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	bb 1f       	adc	r27, r27
 738:	26 17       	cp	r18, r22
 73a:	37 07       	cpc	r19, r23
 73c:	48 07       	cpc	r20, r24
 73e:	ab 07       	cpc	r26, r27
 740:	b0 e8       	ldi	r27, 0x80	; 128
 742:	09 f0       	breq	.+2      	; 0x746 <__divsf3_pse+0x56>
 744:	bb 0b       	sbc	r27, r27
 746:	80 2d       	mov	r24, r0
 748:	bf 01       	movw	r22, r30
 74a:	ff 27       	eor	r31, r31
 74c:	93 58       	subi	r25, 0x83	; 131
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	3a f0       	brmi	.+14     	; 0x760 <__divsf3_pse+0x70>
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	51 05       	cpc	r21, r1
 756:	78 f0       	brcs	.+30     	; 0x776 <__divsf3_pse+0x86>
 758:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 75c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	e4 f3       	brlt	.-8      	; 0x75c <__divsf3_pse+0x6c>
 764:	98 3e       	cpi	r25, 0xE8	; 232
 766:	d4 f3       	brlt	.-12     	; 0x75c <__divsf3_pse+0x6c>
 768:	86 95       	lsr	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	c9 f7       	brne	.-14     	; 0x768 <__divsf3_pse+0x78>
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret
 782:	e1 e0       	ldi	r30, 0x01	; 1
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	bb 1f       	adc	r27, r27
 78c:	62 17       	cp	r22, r18
 78e:	73 07       	cpc	r23, r19
 790:	84 07       	cpc	r24, r20
 792:	ba 07       	cpc	r27, r26
 794:	20 f0       	brcs	.+8      	; 0x79e <__divsf3_pse+0xae>
 796:	62 1b       	sub	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	ba 0b       	sbc	r27, r26
 79e:	ee 1f       	adc	r30, r30
 7a0:	88 f7       	brcc	.-30     	; 0x784 <__divsf3_pse+0x94>
 7a2:	e0 95       	com	r30
 7a4:	08 95       	ret

000007a6 <__floatunsisf>:
 7a6:	e8 94       	clt
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <__floatsisf+0x12>

000007aa <__floatsisf>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	3e f4       	brtc	.+14     	; 0x7bc <__floatsisf+0x12>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	99 23       	and	r25, r25
 7be:	a9 f0       	breq	.+42     	; 0x7ea <__floatsisf+0x40>
 7c0:	f9 2f       	mov	r31, r25
 7c2:	96 e9       	ldi	r25, 0x96	; 150
 7c4:	bb 27       	eor	r27, r27
 7c6:	93 95       	inc	r25
 7c8:	f6 95       	lsr	r31
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f1 11       	cpse	r31, r1
 7d4:	f8 cf       	rjmp	.-16     	; 0x7c6 <__floatsisf+0x1c>
 7d6:	fa f4       	brpl	.+62     	; 0x816 <__floatsisf+0x6c>
 7d8:	bb 0f       	add	r27, r27
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__floatsisf+0x36>
 7dc:	60 ff       	sbrs	r22, 0
 7de:	1b c0       	rjmp	.+54     	; 0x816 <__floatsisf+0x6c>
 7e0:	6f 5f       	subi	r22, 0xFF	; 255
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	16 c0       	rjmp	.+44     	; 0x816 <__floatsisf+0x6c>
 7ea:	88 23       	and	r24, r24
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <__floatsisf+0x48>
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	11 c0       	rjmp	.+34     	; 0x814 <__floatsisf+0x6a>
 7f2:	77 23       	and	r23, r23
 7f4:	21 f0       	breq	.+8      	; 0x7fe <__floatsisf+0x54>
 7f6:	9e e8       	ldi	r25, 0x8E	; 142
 7f8:	87 2f       	mov	r24, r23
 7fa:	76 2f       	mov	r23, r22
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__floatsisf+0x5e>
 7fe:	66 23       	and	r22, r22
 800:	71 f0       	breq	.+28     	; 0x81e <__floatsisf+0x74>
 802:	96 e8       	ldi	r25, 0x86	; 134
 804:	86 2f       	mov	r24, r22
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	2a f0       	brmi	.+10     	; 0x816 <__floatsisf+0x6c>
 80c:	9a 95       	dec	r25
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	da f7       	brpl	.-10     	; 0x80c <__floatsisf+0x62>
 816:	88 0f       	add	r24, r24
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_inf>:
 820:	97 f9       	bld	r25, 7
 822:	9f 67       	ori	r25, 0x7F	; 127
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	08 95       	ret

0000082c <__fp_nan>:
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	80 ec       	ldi	r24, 0xC0	; 192
 830:	08 95       	ret

00000832 <__fp_pscA>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	09 06       	cpc	r0, r25
 83e:	08 95       	ret

00000840 <__fp_pscB>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	05 06       	cpc	r0, r21
 84c:	08 95       	ret

0000084e <__fp_round>:
 84e:	09 2e       	mov	r0, r25
 850:	03 94       	inc	r0
 852:	00 0c       	add	r0, r0
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0xc>
 856:	88 23       	and	r24, r24
 858:	52 f0       	brmi	.+20     	; 0x86e <__fp_round+0x20>
 85a:	bb 0f       	add	r27, r27
 85c:	40 f4       	brcc	.+16     	; 0x86e <__fp_round+0x20>
 85e:	bf 2b       	or	r27, r31
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0x18>
 862:	60 ff       	sbrs	r22, 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <__fp_round+0x20>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__fp_split3>:
 870:	57 fd       	sbrc	r21, 7
 872:	90 58       	subi	r25, 0x80	; 128
 874:	44 0f       	add	r20, r20
 876:	55 1f       	adc	r21, r21
 878:	59 f0       	breq	.+22     	; 0x890 <__fp_splitA+0x10>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	71 f0       	breq	.+28     	; 0x89a <__fp_splitA+0x1a>
 87e:	47 95       	ror	r20

00000880 <__fp_splitA>:
 880:	88 0f       	add	r24, r24
 882:	97 fb       	bst	r25, 7
 884:	99 1f       	adc	r25, r25
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_splitA+0x20>
 888:	9f 3f       	cpi	r25, 0xFF	; 255
 88a:	79 f0       	breq	.+30     	; 0x8aa <__fp_splitA+0x2a>
 88c:	87 95       	ror	r24
 88e:	08 95       	ret
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	55 1f       	adc	r21, r21
 898:	f2 cf       	rjmp	.-28     	; 0x87e <__fp_split3+0xe>
 89a:	46 95       	lsr	r20
 89c:	f1 df       	rcall	.-30     	; 0x880 <__fp_splitA>
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <__fp_splitA+0x30>
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	f1 cf       	rjmp	.-30     	; 0x88c <__fp_splitA+0xc>
 8aa:	86 95       	lsr	r24
 8ac:	71 05       	cpc	r23, r1
 8ae:	61 05       	cpc	r22, r1
 8b0:	08 94       	sec
 8b2:	08 95       	ret

000008b4 <__fp_zero>:
 8b4:	e8 94       	clt

000008b6 <__fp_szero>:
 8b6:	bb 27       	eor	r27, r27
 8b8:	66 27       	eor	r22, r22
 8ba:	77 27       	eor	r23, r23
 8bc:	cb 01       	movw	r24, r22
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__mulsf3>:
 8c2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__mulsf3x>
 8c6:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 8ca:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 8ce:	38 f0       	brcs	.+14     	; 0x8de <__mulsf3+0x1c>
 8d0:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__mulsf3+0x1c>
 8d6:	95 23       	and	r25, r21
 8d8:	11 f0       	breq	.+4      	; 0x8de <__mulsf3+0x1c>
 8da:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 8de:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 8e2:	11 24       	eor	r1, r1
 8e4:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>

000008e8 <__mulsf3x>:
 8e8:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 8ec:	70 f3       	brcs	.-36     	; 0x8ca <__mulsf3+0x8>

000008ee <__mulsf3_pse>:
 8ee:	95 9f       	mul	r25, r21
 8f0:	c1 f3       	breq	.-16     	; 0x8e2 <__mulsf3+0x20>
 8f2:	95 0f       	add	r25, r21
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	55 1f       	adc	r21, r21
 8f8:	62 9f       	mul	r22, r18
 8fa:	f0 01       	movw	r30, r0
 8fc:	72 9f       	mul	r23, r18
 8fe:	bb 27       	eor	r27, r27
 900:	f0 0d       	add	r31, r0
 902:	b1 1d       	adc	r27, r1
 904:	63 9f       	mul	r22, r19
 906:	aa 27       	eor	r26, r26
 908:	f0 0d       	add	r31, r0
 90a:	b1 1d       	adc	r27, r1
 90c:	aa 1f       	adc	r26, r26
 90e:	64 9f       	mul	r22, r20
 910:	66 27       	eor	r22, r22
 912:	b0 0d       	add	r27, r0
 914:	a1 1d       	adc	r26, r1
 916:	66 1f       	adc	r22, r22
 918:	82 9f       	mul	r24, r18
 91a:	22 27       	eor	r18, r18
 91c:	b0 0d       	add	r27, r0
 91e:	a1 1d       	adc	r26, r1
 920:	62 1f       	adc	r22, r18
 922:	73 9f       	mul	r23, r19
 924:	b0 0d       	add	r27, r0
 926:	a1 1d       	adc	r26, r1
 928:	62 1f       	adc	r22, r18
 92a:	83 9f       	mul	r24, r19
 92c:	a0 0d       	add	r26, r0
 92e:	61 1d       	adc	r22, r1
 930:	22 1f       	adc	r18, r18
 932:	74 9f       	mul	r23, r20
 934:	33 27       	eor	r19, r19
 936:	a0 0d       	add	r26, r0
 938:	61 1d       	adc	r22, r1
 93a:	23 1f       	adc	r18, r19
 93c:	84 9f       	mul	r24, r20
 93e:	60 0d       	add	r22, r0
 940:	21 1d       	adc	r18, r1
 942:	82 2f       	mov	r24, r18
 944:	76 2f       	mov	r23, r22
 946:	6a 2f       	mov	r22, r26
 948:	11 24       	eor	r1, r1
 94a:	9f 57       	subi	r25, 0x7F	; 127
 94c:	50 40       	sbci	r21, 0x00	; 0
 94e:	9a f0       	brmi	.+38     	; 0x976 <__stack+0x77>
 950:	f1 f0       	breq	.+60     	; 0x98e <__stack+0x8f>
 952:	88 23       	and	r24, r24
 954:	4a f0       	brmi	.+18     	; 0x968 <__stack+0x69>
 956:	ee 0f       	add	r30, r30
 958:	ff 1f       	adc	r31, r31
 95a:	bb 1f       	adc	r27, r27
 95c:	66 1f       	adc	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	91 50       	subi	r25, 0x01	; 1
 964:	50 40       	sbci	r21, 0x00	; 0
 966:	a9 f7       	brne	.-22     	; 0x952 <__stack+0x53>
 968:	9e 3f       	cpi	r25, 0xFE	; 254
 96a:	51 05       	cpc	r21, r1
 96c:	80 f0       	brcs	.+32     	; 0x98e <__stack+0x8f>
 96e:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 972:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 976:	5f 3f       	cpi	r21, 0xFF	; 255
 978:	e4 f3       	brlt	.-8      	; 0x972 <__stack+0x73>
 97a:	98 3e       	cpi	r25, 0xE8	; 232
 97c:	d4 f3       	brlt	.-12     	; 0x972 <__stack+0x73>
 97e:	86 95       	lsr	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b7 95       	ror	r27
 986:	f7 95       	ror	r31
 988:	e7 95       	ror	r30
 98a:	9f 5f       	subi	r25, 0xFF	; 255
 98c:	c1 f7       	brne	.-16     	; 0x97e <__stack+0x7f>
 98e:	fe 2b       	or	r31, r30
 990:	88 0f       	add	r24, r24
 992:	91 1d       	adc	r25, r1
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	97 f9       	bld	r25, 7
 99a:	08 95       	ret

0000099c <snprintf>:
 99c:	ae e0       	ldi	r26, 0x0E	; 14
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e4 ed       	ldi	r30, 0xD4	; 212
 9a2:	f4 e0       	ldi	r31, 0x04	; 4
 9a4:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__prologue_saves__+0x1c>
 9a8:	0d 89       	ldd	r16, Y+21	; 0x15
 9aa:	1e 89       	ldd	r17, Y+22	; 0x16
 9ac:	8f 89       	ldd	r24, Y+23	; 0x17
 9ae:	98 8d       	ldd	r25, Y+24	; 0x18
 9b0:	26 e0       	ldi	r18, 0x06	; 6
 9b2:	2c 83       	std	Y+4, r18	; 0x04
 9b4:	1a 83       	std	Y+2, r17	; 0x02
 9b6:	09 83       	std	Y+1, r16	; 0x01
 9b8:	97 ff       	sbrs	r25, 7
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <snprintf+0x24>
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	90 e8       	ldi	r25, 0x80	; 128
 9c0:	01 97       	sbiw	r24, 0x01	; 1
 9c2:	9e 83       	std	Y+6, r25	; 0x06
 9c4:	8d 83       	std	Y+5, r24	; 0x05
 9c6:	ae 01       	movw	r20, r28
 9c8:	45 5e       	subi	r20, 0xE5	; 229
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	69 8d       	ldd	r22, Y+25	; 0x19
 9ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9d0:	ce 01       	movw	r24, r28
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <vfprintf>
 9d8:	4d 81       	ldd	r20, Y+5	; 0x05
 9da:	5e 81       	ldd	r21, Y+6	; 0x06
 9dc:	57 fd       	sbrc	r21, 7
 9de:	0a c0       	rjmp	.+20     	; 0x9f4 <snprintf+0x58>
 9e0:	2f 81       	ldd	r18, Y+7	; 0x07
 9e2:	38 85       	ldd	r19, Y+8	; 0x08
 9e4:	42 17       	cp	r20, r18
 9e6:	53 07       	cpc	r21, r19
 9e8:	0c f4       	brge	.+2      	; 0x9ec <snprintf+0x50>
 9ea:	9a 01       	movw	r18, r20
 9ec:	f8 01       	movw	r30, r16
 9ee:	e2 0f       	add	r30, r18
 9f0:	f3 1f       	adc	r31, r19
 9f2:	10 82       	st	Z, r1
 9f4:	2e 96       	adiw	r28, 0x0e	; 14
 9f6:	e4 e0       	ldi	r30, 0x04	; 4
 9f8:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__epilogue_restores__+0x1c>

000009fc <vfprintf>:
 9fc:	ab e0       	ldi	r26, 0x0B	; 11
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	e4 e0       	ldi	r30, 0x04	; 4
 a02:	f5 e0       	ldi	r31, 0x05	; 5
 a04:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__prologue_saves__>
 a08:	6c 01       	movw	r12, r24
 a0a:	7b 01       	movw	r14, r22
 a0c:	8a 01       	movw	r16, r20
 a0e:	fc 01       	movw	r30, r24
 a10:	17 82       	std	Z+7, r1	; 0x07
 a12:	16 82       	std	Z+6, r1	; 0x06
 a14:	83 81       	ldd	r24, Z+3	; 0x03
 a16:	81 ff       	sbrs	r24, 1
 a18:	cc c1       	rjmp	.+920    	; 0xdb2 <vfprintf+0x3b6>
 a1a:	ce 01       	movw	r24, r28
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	3c 01       	movw	r6, r24
 a20:	f6 01       	movw	r30, r12
 a22:	93 81       	ldd	r25, Z+3	; 0x03
 a24:	f7 01       	movw	r30, r14
 a26:	93 fd       	sbrc	r25, 3
 a28:	85 91       	lpm	r24, Z+
 a2a:	93 ff       	sbrs	r25, 3
 a2c:	81 91       	ld	r24, Z+
 a2e:	7f 01       	movw	r14, r30
 a30:	88 23       	and	r24, r24
 a32:	09 f4       	brne	.+2      	; 0xa36 <vfprintf+0x3a>
 a34:	ba c1       	rjmp	.+884    	; 0xdaa <vfprintf+0x3ae>
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	39 f4       	brne	.+14     	; 0xa48 <vfprintf+0x4c>
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	7f 01       	movw	r14, r30
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	29 f4       	brne	.+10     	; 0xa52 <vfprintf+0x56>
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 a50:	e7 cf       	rjmp	.-50     	; 0xa20 <vfprintf+0x24>
 a52:	91 2c       	mov	r9, r1
 a54:	21 2c       	mov	r2, r1
 a56:	31 2c       	mov	r3, r1
 a58:	ff e1       	ldi	r31, 0x1F	; 31
 a5a:	f3 15       	cp	r31, r3
 a5c:	d8 f0       	brcs	.+54     	; 0xa94 <vfprintf+0x98>
 a5e:	8b 32       	cpi	r24, 0x2B	; 43
 a60:	79 f0       	breq	.+30     	; 0xa80 <vfprintf+0x84>
 a62:	38 f4       	brcc	.+14     	; 0xa72 <vfprintf+0x76>
 a64:	80 32       	cpi	r24, 0x20	; 32
 a66:	79 f0       	breq	.+30     	; 0xa86 <vfprintf+0x8a>
 a68:	83 32       	cpi	r24, 0x23	; 35
 a6a:	a1 f4       	brne	.+40     	; 0xa94 <vfprintf+0x98>
 a6c:	23 2d       	mov	r18, r3
 a6e:	20 61       	ori	r18, 0x10	; 16
 a70:	1d c0       	rjmp	.+58     	; 0xaac <vfprintf+0xb0>
 a72:	8d 32       	cpi	r24, 0x2D	; 45
 a74:	61 f0       	breq	.+24     	; 0xa8e <vfprintf+0x92>
 a76:	80 33       	cpi	r24, 0x30	; 48
 a78:	69 f4       	brne	.+26     	; 0xa94 <vfprintf+0x98>
 a7a:	23 2d       	mov	r18, r3
 a7c:	21 60       	ori	r18, 0x01	; 1
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <vfprintf+0xb0>
 a80:	83 2d       	mov	r24, r3
 a82:	82 60       	ori	r24, 0x02	; 2
 a84:	38 2e       	mov	r3, r24
 a86:	e3 2d       	mov	r30, r3
 a88:	e4 60       	ori	r30, 0x04	; 4
 a8a:	3e 2e       	mov	r3, r30
 a8c:	2a c0       	rjmp	.+84     	; 0xae2 <vfprintf+0xe6>
 a8e:	f3 2d       	mov	r31, r3
 a90:	f8 60       	ori	r31, 0x08	; 8
 a92:	1d c0       	rjmp	.+58     	; 0xace <vfprintf+0xd2>
 a94:	37 fc       	sbrc	r3, 7
 a96:	2d c0       	rjmp	.+90     	; 0xaf2 <vfprintf+0xf6>
 a98:	20 ed       	ldi	r18, 0xD0	; 208
 a9a:	28 0f       	add	r18, r24
 a9c:	2a 30       	cpi	r18, 0x0A	; 10
 a9e:	40 f0       	brcs	.+16     	; 0xab0 <vfprintf+0xb4>
 aa0:	8e 32       	cpi	r24, 0x2E	; 46
 aa2:	b9 f4       	brne	.+46     	; 0xad2 <vfprintf+0xd6>
 aa4:	36 fc       	sbrc	r3, 6
 aa6:	81 c1       	rjmp	.+770    	; 0xdaa <vfprintf+0x3ae>
 aa8:	23 2d       	mov	r18, r3
 aaa:	20 64       	ori	r18, 0x40	; 64
 aac:	32 2e       	mov	r3, r18
 aae:	19 c0       	rjmp	.+50     	; 0xae2 <vfprintf+0xe6>
 ab0:	36 fe       	sbrs	r3, 6
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <vfprintf+0xc4>
 ab4:	8a e0       	ldi	r24, 0x0A	; 10
 ab6:	98 9e       	mul	r9, r24
 ab8:	20 0d       	add	r18, r0
 aba:	11 24       	eor	r1, r1
 abc:	92 2e       	mov	r9, r18
 abe:	11 c0       	rjmp	.+34     	; 0xae2 <vfprintf+0xe6>
 ac0:	ea e0       	ldi	r30, 0x0A	; 10
 ac2:	2e 9e       	mul	r2, r30
 ac4:	20 0d       	add	r18, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	22 2e       	mov	r2, r18
 aca:	f3 2d       	mov	r31, r3
 acc:	f0 62       	ori	r31, 0x20	; 32
 ace:	3f 2e       	mov	r3, r31
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <vfprintf+0xe6>
 ad2:	8c 36       	cpi	r24, 0x6C	; 108
 ad4:	21 f4       	brne	.+8      	; 0xade <vfprintf+0xe2>
 ad6:	83 2d       	mov	r24, r3
 ad8:	80 68       	ori	r24, 0x80	; 128
 ada:	38 2e       	mov	r3, r24
 adc:	02 c0       	rjmp	.+4      	; 0xae2 <vfprintf+0xe6>
 ade:	88 36       	cpi	r24, 0x68	; 104
 ae0:	41 f4       	brne	.+16     	; 0xaf2 <vfprintf+0xf6>
 ae2:	f7 01       	movw	r30, r14
 ae4:	93 fd       	sbrc	r25, 3
 ae6:	85 91       	lpm	r24, Z+
 ae8:	93 ff       	sbrs	r25, 3
 aea:	81 91       	ld	r24, Z+
 aec:	7f 01       	movw	r14, r30
 aee:	81 11       	cpse	r24, r1
 af0:	b3 cf       	rjmp	.-154    	; 0xa58 <vfprintf+0x5c>
 af2:	98 2f       	mov	r25, r24
 af4:	9f 7d       	andi	r25, 0xDF	; 223
 af6:	95 54       	subi	r25, 0x45	; 69
 af8:	93 30       	cpi	r25, 0x03	; 3
 afa:	28 f4       	brcc	.+10     	; 0xb06 <vfprintf+0x10a>
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	9f e3       	ldi	r25, 0x3F	; 63
 b02:	99 83       	std	Y+1, r25	; 0x01
 b04:	0d c0       	rjmp	.+26     	; 0xb20 <vfprintf+0x124>
 b06:	83 36       	cpi	r24, 0x63	; 99
 b08:	31 f0       	breq	.+12     	; 0xb16 <vfprintf+0x11a>
 b0a:	83 37       	cpi	r24, 0x73	; 115
 b0c:	71 f0       	breq	.+28     	; 0xb2a <vfprintf+0x12e>
 b0e:	83 35       	cpi	r24, 0x53	; 83
 b10:	09 f0       	breq	.+2      	; 0xb14 <vfprintf+0x118>
 b12:	59 c0       	rjmp	.+178    	; 0xbc6 <vfprintf+0x1ca>
 b14:	21 c0       	rjmp	.+66     	; 0xb58 <vfprintf+0x15c>
 b16:	f8 01       	movw	r30, r16
 b18:	80 81       	ld	r24, Z
 b1a:	89 83       	std	Y+1, r24	; 0x01
 b1c:	0e 5f       	subi	r16, 0xFE	; 254
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	88 24       	eor	r8, r8
 b22:	83 94       	inc	r8
 b24:	91 2c       	mov	r9, r1
 b26:	53 01       	movw	r10, r6
 b28:	13 c0       	rjmp	.+38     	; 0xb50 <vfprintf+0x154>
 b2a:	28 01       	movw	r4, r16
 b2c:	f2 e0       	ldi	r31, 0x02	; 2
 b2e:	4f 0e       	add	r4, r31
 b30:	51 1c       	adc	r5, r1
 b32:	f8 01       	movw	r30, r16
 b34:	a0 80       	ld	r10, Z
 b36:	b1 80       	ldd	r11, Z+1	; 0x01
 b38:	36 fe       	sbrs	r3, 6
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <vfprintf+0x146>
 b3c:	69 2d       	mov	r22, r9
 b3e:	70 e0       	ldi	r23, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <vfprintf+0x14a>
 b42:	6f ef       	ldi	r22, 0xFF	; 255
 b44:	7f ef       	ldi	r23, 0xFF	; 255
 b46:	c5 01       	movw	r24, r10
 b48:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <strnlen>
 b4c:	4c 01       	movw	r8, r24
 b4e:	82 01       	movw	r16, r4
 b50:	f3 2d       	mov	r31, r3
 b52:	ff 77       	andi	r31, 0x7F	; 127
 b54:	3f 2e       	mov	r3, r31
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <vfprintf+0x188>
 b58:	28 01       	movw	r4, r16
 b5a:	22 e0       	ldi	r18, 0x02	; 2
 b5c:	42 0e       	add	r4, r18
 b5e:	51 1c       	adc	r5, r1
 b60:	f8 01       	movw	r30, r16
 b62:	a0 80       	ld	r10, Z
 b64:	b1 80       	ldd	r11, Z+1	; 0x01
 b66:	36 fe       	sbrs	r3, 6
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <vfprintf+0x174>
 b6a:	69 2d       	mov	r22, r9
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0x178>
 b70:	6f ef       	ldi	r22, 0xFF	; 255
 b72:	7f ef       	ldi	r23, 0xFF	; 255
 b74:	c5 01       	movw	r24, r10
 b76:	0e 94 df 06 	call	0xdbe	; 0xdbe <strnlen_P>
 b7a:	4c 01       	movw	r8, r24
 b7c:	f3 2d       	mov	r31, r3
 b7e:	f0 68       	ori	r31, 0x80	; 128
 b80:	3f 2e       	mov	r3, r31
 b82:	82 01       	movw	r16, r4
 b84:	33 fc       	sbrc	r3, 3
 b86:	1b c0       	rjmp	.+54     	; 0xbbe <vfprintf+0x1c2>
 b88:	82 2d       	mov	r24, r2
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	88 16       	cp	r8, r24
 b8e:	99 06       	cpc	r9, r25
 b90:	b0 f4       	brcc	.+44     	; 0xbbe <vfprintf+0x1c2>
 b92:	b6 01       	movw	r22, r12
 b94:	80 e2       	ldi	r24, 0x20	; 32
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 b9c:	2a 94       	dec	r2
 b9e:	f4 cf       	rjmp	.-24     	; 0xb88 <vfprintf+0x18c>
 ba0:	f5 01       	movw	r30, r10
 ba2:	37 fc       	sbrc	r3, 7
 ba4:	85 91       	lpm	r24, Z+
 ba6:	37 fe       	sbrs	r3, 7
 ba8:	81 91       	ld	r24, Z+
 baa:	5f 01       	movw	r10, r30
 bac:	b6 01       	movw	r22, r12
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 bb4:	21 10       	cpse	r2, r1
 bb6:	2a 94       	dec	r2
 bb8:	21 e0       	ldi	r18, 0x01	; 1
 bba:	82 1a       	sub	r8, r18
 bbc:	91 08       	sbc	r9, r1
 bbe:	81 14       	cp	r8, r1
 bc0:	91 04       	cpc	r9, r1
 bc2:	71 f7       	brne	.-36     	; 0xba0 <vfprintf+0x1a4>
 bc4:	e8 c0       	rjmp	.+464    	; 0xd96 <vfprintf+0x39a>
 bc6:	84 36       	cpi	r24, 0x64	; 100
 bc8:	11 f0       	breq	.+4      	; 0xbce <vfprintf+0x1d2>
 bca:	89 36       	cpi	r24, 0x69	; 105
 bcc:	41 f5       	brne	.+80     	; 0xc1e <vfprintf+0x222>
 bce:	f8 01       	movw	r30, r16
 bd0:	37 fe       	sbrs	r3, 7
 bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <vfprintf+0x1e6>
 bd4:	60 81       	ld	r22, Z
 bd6:	71 81       	ldd	r23, Z+1	; 0x01
 bd8:	82 81       	ldd	r24, Z+2	; 0x02
 bda:	93 81       	ldd	r25, Z+3	; 0x03
 bdc:	0c 5f       	subi	r16, 0xFC	; 252
 bde:	1f 4f       	sbci	r17, 0xFF	; 255
 be0:	08 c0       	rjmp	.+16     	; 0xbf2 <vfprintf+0x1f6>
 be2:	60 81       	ld	r22, Z
 be4:	71 81       	ldd	r23, Z+1	; 0x01
 be6:	07 2e       	mov	r0, r23
 be8:	00 0c       	add	r0, r0
 bea:	88 0b       	sbc	r24, r24
 bec:	99 0b       	sbc	r25, r25
 bee:	0e 5f       	subi	r16, 0xFE	; 254
 bf0:	1f 4f       	sbci	r17, 0xFF	; 255
 bf2:	f3 2d       	mov	r31, r3
 bf4:	ff 76       	andi	r31, 0x6F	; 111
 bf6:	3f 2e       	mov	r3, r31
 bf8:	97 ff       	sbrs	r25, 7
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <vfprintf+0x212>
 bfc:	90 95       	com	r25
 bfe:	80 95       	com	r24
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	f0 68       	ori	r31, 0x80	; 128
 c0c:	3f 2e       	mov	r3, r31
 c0e:	2a e0       	ldi	r18, 0x0A	; 10
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	a3 01       	movw	r20, r6
 c14:	0e 94 31 07 	call	0xe62	; 0xe62 <__ultoa_invert>
 c18:	88 2e       	mov	r8, r24
 c1a:	86 18       	sub	r8, r6
 c1c:	45 c0       	rjmp	.+138    	; 0xca8 <vfprintf+0x2ac>
 c1e:	85 37       	cpi	r24, 0x75	; 117
 c20:	31 f4       	brne	.+12     	; 0xc2e <vfprintf+0x232>
 c22:	23 2d       	mov	r18, r3
 c24:	2f 7e       	andi	r18, 0xEF	; 239
 c26:	b2 2e       	mov	r11, r18
 c28:	2a e0       	ldi	r18, 0x0A	; 10
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	25 c0       	rjmp	.+74     	; 0xc78 <vfprintf+0x27c>
 c2e:	93 2d       	mov	r25, r3
 c30:	99 7f       	andi	r25, 0xF9	; 249
 c32:	b9 2e       	mov	r11, r25
 c34:	8f 36       	cpi	r24, 0x6F	; 111
 c36:	c1 f0       	breq	.+48     	; 0xc68 <vfprintf+0x26c>
 c38:	18 f4       	brcc	.+6      	; 0xc40 <vfprintf+0x244>
 c3a:	88 35       	cpi	r24, 0x58	; 88
 c3c:	79 f0       	breq	.+30     	; 0xc5c <vfprintf+0x260>
 c3e:	b5 c0       	rjmp	.+362    	; 0xdaa <vfprintf+0x3ae>
 c40:	80 37       	cpi	r24, 0x70	; 112
 c42:	19 f0       	breq	.+6      	; 0xc4a <vfprintf+0x24e>
 c44:	88 37       	cpi	r24, 0x78	; 120
 c46:	21 f0       	breq	.+8      	; 0xc50 <vfprintf+0x254>
 c48:	b0 c0       	rjmp	.+352    	; 0xdaa <vfprintf+0x3ae>
 c4a:	e9 2f       	mov	r30, r25
 c4c:	e0 61       	ori	r30, 0x10	; 16
 c4e:	be 2e       	mov	r11, r30
 c50:	b4 fe       	sbrs	r11, 4
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <vfprintf+0x272>
 c54:	fb 2d       	mov	r31, r11
 c56:	f4 60       	ori	r31, 0x04	; 4
 c58:	bf 2e       	mov	r11, r31
 c5a:	09 c0       	rjmp	.+18     	; 0xc6e <vfprintf+0x272>
 c5c:	34 fe       	sbrs	r3, 4
 c5e:	0a c0       	rjmp	.+20     	; 0xc74 <vfprintf+0x278>
 c60:	29 2f       	mov	r18, r25
 c62:	26 60       	ori	r18, 0x06	; 6
 c64:	b2 2e       	mov	r11, r18
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x278>
 c68:	28 e0       	ldi	r18, 0x08	; 8
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	05 c0       	rjmp	.+10     	; 0xc78 <vfprintf+0x27c>
 c6e:	20 e1       	ldi	r18, 0x10	; 16
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0x27c>
 c74:	20 e1       	ldi	r18, 0x10	; 16
 c76:	32 e0       	ldi	r19, 0x02	; 2
 c78:	f8 01       	movw	r30, r16
 c7a:	b7 fe       	sbrs	r11, 7
 c7c:	07 c0       	rjmp	.+14     	; 0xc8c <vfprintf+0x290>
 c7e:	60 81       	ld	r22, Z
 c80:	71 81       	ldd	r23, Z+1	; 0x01
 c82:	82 81       	ldd	r24, Z+2	; 0x02
 c84:	93 81       	ldd	r25, Z+3	; 0x03
 c86:	0c 5f       	subi	r16, 0xFC	; 252
 c88:	1f 4f       	sbci	r17, 0xFF	; 255
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <vfprintf+0x29c>
 c8c:	60 81       	ld	r22, Z
 c8e:	71 81       	ldd	r23, Z+1	; 0x01
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 5f       	subi	r16, 0xFE	; 254
 c96:	1f 4f       	sbci	r17, 0xFF	; 255
 c98:	a3 01       	movw	r20, r6
 c9a:	0e 94 31 07 	call	0xe62	; 0xe62 <__ultoa_invert>
 c9e:	88 2e       	mov	r8, r24
 ca0:	86 18       	sub	r8, r6
 ca2:	fb 2d       	mov	r31, r11
 ca4:	ff 77       	andi	r31, 0x7F	; 127
 ca6:	3f 2e       	mov	r3, r31
 ca8:	36 fe       	sbrs	r3, 6
 caa:	0d c0       	rjmp	.+26     	; 0xcc6 <vfprintf+0x2ca>
 cac:	23 2d       	mov	r18, r3
 cae:	2e 7f       	andi	r18, 0xFE	; 254
 cb0:	a2 2e       	mov	r10, r18
 cb2:	89 14       	cp	r8, r9
 cb4:	58 f4       	brcc	.+22     	; 0xccc <vfprintf+0x2d0>
 cb6:	34 fe       	sbrs	r3, 4
 cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <vfprintf+0x2d4>
 cba:	32 fc       	sbrc	r3, 2
 cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <vfprintf+0x2d4>
 cbe:	83 2d       	mov	r24, r3
 cc0:	8e 7e       	andi	r24, 0xEE	; 238
 cc2:	a8 2e       	mov	r10, r24
 cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <vfprintf+0x2d4>
 cc6:	b8 2c       	mov	r11, r8
 cc8:	a3 2c       	mov	r10, r3
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <vfprintf+0x2d6>
 ccc:	b8 2c       	mov	r11, r8
 cce:	01 c0       	rjmp	.+2      	; 0xcd2 <vfprintf+0x2d6>
 cd0:	b9 2c       	mov	r11, r9
 cd2:	a4 fe       	sbrs	r10, 4
 cd4:	0f c0       	rjmp	.+30     	; 0xcf4 <vfprintf+0x2f8>
 cd6:	fe 01       	movw	r30, r28
 cd8:	e8 0d       	add	r30, r8
 cda:	f1 1d       	adc	r31, r1
 cdc:	80 81       	ld	r24, Z
 cde:	80 33       	cpi	r24, 0x30	; 48
 ce0:	21 f4       	brne	.+8      	; 0xcea <vfprintf+0x2ee>
 ce2:	9a 2d       	mov	r25, r10
 ce4:	99 7e       	andi	r25, 0xE9	; 233
 ce6:	a9 2e       	mov	r10, r25
 ce8:	09 c0       	rjmp	.+18     	; 0xcfc <vfprintf+0x300>
 cea:	a2 fe       	sbrs	r10, 2
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x2fe>
 cee:	b3 94       	inc	r11
 cf0:	b3 94       	inc	r11
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <vfprintf+0x300>
 cf4:	8a 2d       	mov	r24, r10
 cf6:	86 78       	andi	r24, 0x86	; 134
 cf8:	09 f0       	breq	.+2      	; 0xcfc <vfprintf+0x300>
 cfa:	b3 94       	inc	r11
 cfc:	a3 fc       	sbrc	r10, 3
 cfe:	11 c0       	rjmp	.+34     	; 0xd22 <vfprintf+0x326>
 d00:	a0 fe       	sbrs	r10, 0
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x314>
 d04:	b2 14       	cp	r11, r2
 d06:	88 f4       	brcc	.+34     	; 0xd2a <vfprintf+0x32e>
 d08:	28 0c       	add	r2, r8
 d0a:	92 2c       	mov	r9, r2
 d0c:	9b 18       	sub	r9, r11
 d0e:	0e c0       	rjmp	.+28     	; 0xd2c <vfprintf+0x330>
 d10:	b2 14       	cp	r11, r2
 d12:	60 f4       	brcc	.+24     	; 0xd2c <vfprintf+0x330>
 d14:	b6 01       	movw	r22, r12
 d16:	80 e2       	ldi	r24, 0x20	; 32
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d1e:	b3 94       	inc	r11
 d20:	f7 cf       	rjmp	.-18     	; 0xd10 <vfprintf+0x314>
 d22:	b2 14       	cp	r11, r2
 d24:	18 f4       	brcc	.+6      	; 0xd2c <vfprintf+0x330>
 d26:	2b 18       	sub	r2, r11
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0x332>
 d2a:	98 2c       	mov	r9, r8
 d2c:	21 2c       	mov	r2, r1
 d2e:	a4 fe       	sbrs	r10, 4
 d30:	10 c0       	rjmp	.+32     	; 0xd52 <vfprintf+0x356>
 d32:	b6 01       	movw	r22, r12
 d34:	80 e3       	ldi	r24, 0x30	; 48
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d3c:	a2 fe       	sbrs	r10, 2
 d3e:	17 c0       	rjmp	.+46     	; 0xd6e <vfprintf+0x372>
 d40:	a1 fc       	sbrc	r10, 1
 d42:	03 c0       	rjmp	.+6      	; 0xd4a <vfprintf+0x34e>
 d44:	88 e7       	ldi	r24, 0x78	; 120
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x352>
 d4a:	88 e5       	ldi	r24, 0x58	; 88
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	b6 01       	movw	r22, r12
 d50:	0c c0       	rjmp	.+24     	; 0xd6a <vfprintf+0x36e>
 d52:	8a 2d       	mov	r24, r10
 d54:	86 78       	andi	r24, 0x86	; 134
 d56:	59 f0       	breq	.+22     	; 0xd6e <vfprintf+0x372>
 d58:	a1 fe       	sbrs	r10, 1
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x364>
 d5c:	8b e2       	ldi	r24, 0x2B	; 43
 d5e:	01 c0       	rjmp	.+2      	; 0xd62 <vfprintf+0x366>
 d60:	80 e2       	ldi	r24, 0x20	; 32
 d62:	a7 fc       	sbrc	r10, 7
 d64:	8d e2       	ldi	r24, 0x2D	; 45
 d66:	b6 01       	movw	r22, r12
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d6e:	89 14       	cp	r8, r9
 d70:	38 f4       	brcc	.+14     	; 0xd80 <vfprintf+0x384>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e3       	ldi	r24, 0x30	; 48
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d7c:	9a 94       	dec	r9
 d7e:	f7 cf       	rjmp	.-18     	; 0xd6e <vfprintf+0x372>
 d80:	8a 94       	dec	r8
 d82:	f3 01       	movw	r30, r6
 d84:	e8 0d       	add	r30, r8
 d86:	f1 1d       	adc	r31, r1
 d88:	80 81       	ld	r24, Z
 d8a:	b6 01       	movw	r22, r12
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 d92:	81 10       	cpse	r8, r1
 d94:	f5 cf       	rjmp	.-22     	; 0xd80 <vfprintf+0x384>
 d96:	22 20       	and	r2, r2
 d98:	09 f4       	brne	.+2      	; 0xd9c <vfprintf+0x3a0>
 d9a:	42 ce       	rjmp	.-892    	; 0xa20 <vfprintf+0x24>
 d9c:	b6 01       	movw	r22, r12
 d9e:	80 e2       	ldi	r24, 0x20	; 32
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	0e 94 f5 06 	call	0xdea	; 0xdea <fputc>
 da6:	2a 94       	dec	r2
 da8:	f6 cf       	rjmp	.-20     	; 0xd96 <vfprintf+0x39a>
 daa:	f6 01       	movw	r30, r12
 dac:	86 81       	ldd	r24, Z+6	; 0x06
 dae:	97 81       	ldd	r25, Z+7	; 0x07
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x3ba>
 db2:	8f ef       	ldi	r24, 0xFF	; 255
 db4:	9f ef       	ldi	r25, 0xFF	; 255
 db6:	2b 96       	adiw	r28, 0x0b	; 11
 db8:	e2 e1       	ldi	r30, 0x12	; 18
 dba:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__epilogue_restores__>

00000dbe <strnlen_P>:
 dbe:	fc 01       	movw	r30, r24
 dc0:	05 90       	lpm	r0, Z+
 dc2:	61 50       	subi	r22, 0x01	; 1
 dc4:	70 40       	sbci	r23, 0x00	; 0
 dc6:	01 10       	cpse	r0, r1
 dc8:	d8 f7       	brcc	.-10     	; 0xdc0 <strnlen_P+0x2>
 dca:	80 95       	com	r24
 dcc:	90 95       	com	r25
 dce:	8e 0f       	add	r24, r30
 dd0:	9f 1f       	adc	r25, r31
 dd2:	08 95       	ret

00000dd4 <strnlen>:
 dd4:	fc 01       	movw	r30, r24
 dd6:	61 50       	subi	r22, 0x01	; 1
 dd8:	70 40       	sbci	r23, 0x00	; 0
 dda:	01 90       	ld	r0, Z+
 ddc:	01 10       	cpse	r0, r1
 dde:	d8 f7       	brcc	.-10     	; 0xdd6 <strnlen+0x2>
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	8e 0f       	add	r24, r30
 de6:	9f 1f       	adc	r25, r31
 de8:	08 95       	ret

00000dea <fputc>:
 dea:	0f 93       	push	r16
 dec:	1f 93       	push	r17
 dee:	cf 93       	push	r28
 df0:	df 93       	push	r29
 df2:	fb 01       	movw	r30, r22
 df4:	23 81       	ldd	r18, Z+3	; 0x03
 df6:	21 fd       	sbrc	r18, 1
 df8:	03 c0       	rjmp	.+6      	; 0xe00 <fputc+0x16>
 dfa:	8f ef       	ldi	r24, 0xFF	; 255
 dfc:	9f ef       	ldi	r25, 0xFF	; 255
 dfe:	2c c0       	rjmp	.+88     	; 0xe58 <fputc+0x6e>
 e00:	22 ff       	sbrs	r18, 2
 e02:	16 c0       	rjmp	.+44     	; 0xe30 <fputc+0x46>
 e04:	46 81       	ldd	r20, Z+6	; 0x06
 e06:	57 81       	ldd	r21, Z+7	; 0x07
 e08:	24 81       	ldd	r18, Z+4	; 0x04
 e0a:	35 81       	ldd	r19, Z+5	; 0x05
 e0c:	42 17       	cp	r20, r18
 e0e:	53 07       	cpc	r21, r19
 e10:	44 f4       	brge	.+16     	; 0xe22 <fputc+0x38>
 e12:	a0 81       	ld	r26, Z
 e14:	b1 81       	ldd	r27, Z+1	; 0x01
 e16:	9d 01       	movw	r18, r26
 e18:	2f 5f       	subi	r18, 0xFF	; 255
 e1a:	3f 4f       	sbci	r19, 0xFF	; 255
 e1c:	31 83       	std	Z+1, r19	; 0x01
 e1e:	20 83       	st	Z, r18
 e20:	8c 93       	st	X, r24
 e22:	26 81       	ldd	r18, Z+6	; 0x06
 e24:	37 81       	ldd	r19, Z+7	; 0x07
 e26:	2f 5f       	subi	r18, 0xFF	; 255
 e28:	3f 4f       	sbci	r19, 0xFF	; 255
 e2a:	37 83       	std	Z+7, r19	; 0x07
 e2c:	26 83       	std	Z+6, r18	; 0x06
 e2e:	14 c0       	rjmp	.+40     	; 0xe58 <fputc+0x6e>
 e30:	8b 01       	movw	r16, r22
 e32:	ec 01       	movw	r28, r24
 e34:	fb 01       	movw	r30, r22
 e36:	00 84       	ldd	r0, Z+8	; 0x08
 e38:	f1 85       	ldd	r31, Z+9	; 0x09
 e3a:	e0 2d       	mov	r30, r0
 e3c:	09 95       	icall
 e3e:	89 2b       	or	r24, r25
 e40:	e1 f6       	brne	.-72     	; 0xdfa <fputc+0x10>
 e42:	d8 01       	movw	r26, r16
 e44:	16 96       	adiw	r26, 0x06	; 6
 e46:	8d 91       	ld	r24, X+
 e48:	9c 91       	ld	r25, X
 e4a:	17 97       	sbiw	r26, 0x07	; 7
 e4c:	01 96       	adiw	r24, 0x01	; 1
 e4e:	17 96       	adiw	r26, 0x07	; 7
 e50:	9c 93       	st	X, r25
 e52:	8e 93       	st	-X, r24
 e54:	16 97       	sbiw	r26, 0x06	; 6
 e56:	ce 01       	movw	r24, r28
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	1f 91       	pop	r17
 e5e:	0f 91       	pop	r16
 e60:	08 95       	ret

00000e62 <__ultoa_invert>:
 e62:	fa 01       	movw	r30, r20
 e64:	aa 27       	eor	r26, r26
 e66:	28 30       	cpi	r18, 0x08	; 8
 e68:	51 f1       	breq	.+84     	; 0xebe <__ultoa_invert+0x5c>
 e6a:	20 31       	cpi	r18, 0x10	; 16
 e6c:	81 f1       	breq	.+96     	; 0xece <__ultoa_invert+0x6c>
 e6e:	e8 94       	clt
 e70:	6f 93       	push	r22
 e72:	6e 7f       	andi	r22, 0xFE	; 254
 e74:	6e 5f       	subi	r22, 0xFE	; 254
 e76:	7f 4f       	sbci	r23, 0xFF	; 255
 e78:	8f 4f       	sbci	r24, 0xFF	; 255
 e7a:	9f 4f       	sbci	r25, 0xFF	; 255
 e7c:	af 4f       	sbci	r26, 0xFF	; 255
 e7e:	b1 e0       	ldi	r27, 0x01	; 1
 e80:	3e d0       	rcall	.+124    	; 0xefe <__ultoa_invert+0x9c>
 e82:	b4 e0       	ldi	r27, 0x04	; 4
 e84:	3c d0       	rcall	.+120    	; 0xefe <__ultoa_invert+0x9c>
 e86:	67 0f       	add	r22, r23
 e88:	78 1f       	adc	r23, r24
 e8a:	89 1f       	adc	r24, r25
 e8c:	9a 1f       	adc	r25, r26
 e8e:	a1 1d       	adc	r26, r1
 e90:	68 0f       	add	r22, r24
 e92:	79 1f       	adc	r23, r25
 e94:	8a 1f       	adc	r24, r26
 e96:	91 1d       	adc	r25, r1
 e98:	a1 1d       	adc	r26, r1
 e9a:	6a 0f       	add	r22, r26
 e9c:	71 1d       	adc	r23, r1
 e9e:	81 1d       	adc	r24, r1
 ea0:	91 1d       	adc	r25, r1
 ea2:	a1 1d       	adc	r26, r1
 ea4:	20 d0       	rcall	.+64     	; 0xee6 <__ultoa_invert+0x84>
 ea6:	09 f4       	brne	.+2      	; 0xeaa <__ultoa_invert+0x48>
 ea8:	68 94       	set
 eaa:	3f 91       	pop	r19
 eac:	2a e0       	ldi	r18, 0x0A	; 10
 eae:	26 9f       	mul	r18, r22
 eb0:	11 24       	eor	r1, r1
 eb2:	30 19       	sub	r19, r0
 eb4:	30 5d       	subi	r19, 0xD0	; 208
 eb6:	31 93       	st	Z+, r19
 eb8:	de f6       	brtc	.-74     	; 0xe70 <__ultoa_invert+0xe>
 eba:	cf 01       	movw	r24, r30
 ebc:	08 95       	ret
 ebe:	46 2f       	mov	r20, r22
 ec0:	47 70       	andi	r20, 0x07	; 7
 ec2:	40 5d       	subi	r20, 0xD0	; 208
 ec4:	41 93       	st	Z+, r20
 ec6:	b3 e0       	ldi	r27, 0x03	; 3
 ec8:	0f d0       	rcall	.+30     	; 0xee8 <__ultoa_invert+0x86>
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0x5c>
 ecc:	f6 cf       	rjmp	.-20     	; 0xeba <__ultoa_invert+0x58>
 ece:	46 2f       	mov	r20, r22
 ed0:	4f 70       	andi	r20, 0x0F	; 15
 ed2:	40 5d       	subi	r20, 0xD0	; 208
 ed4:	4a 33       	cpi	r20, 0x3A	; 58
 ed6:	18 f0       	brcs	.+6      	; 0xede <__ultoa_invert+0x7c>
 ed8:	49 5d       	subi	r20, 0xD9	; 217
 eda:	31 fd       	sbrc	r19, 1
 edc:	40 52       	subi	r20, 0x20	; 32
 ede:	41 93       	st	Z+, r20
 ee0:	02 d0       	rcall	.+4      	; 0xee6 <__ultoa_invert+0x84>
 ee2:	a9 f7       	brne	.-22     	; 0xece <__ultoa_invert+0x6c>
 ee4:	ea cf       	rjmp	.-44     	; 0xeba <__ultoa_invert+0x58>
 ee6:	b4 e0       	ldi	r27, 0x04	; 4
 ee8:	a6 95       	lsr	r26
 eea:	97 95       	ror	r25
 eec:	87 95       	ror	r24
 eee:	77 95       	ror	r23
 ef0:	67 95       	ror	r22
 ef2:	ba 95       	dec	r27
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0x86>
 ef6:	00 97       	sbiw	r24, 0x00	; 0
 ef8:	61 05       	cpc	r22, r1
 efa:	71 05       	cpc	r23, r1
 efc:	08 95       	ret
 efe:	9b 01       	movw	r18, r22
 f00:	ac 01       	movw	r20, r24
 f02:	0a 2e       	mov	r0, r26
 f04:	06 94       	lsr	r0
 f06:	57 95       	ror	r21
 f08:	47 95       	ror	r20
 f0a:	37 95       	ror	r19
 f0c:	27 95       	ror	r18
 f0e:	ba 95       	dec	r27
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0xa2>
 f12:	62 0f       	add	r22, r18
 f14:	73 1f       	adc	r23, r19
 f16:	84 1f       	adc	r24, r20
 f18:	95 1f       	adc	r25, r21
 f1a:	a0 1d       	adc	r26, r0
 f1c:	08 95       	ret

00000f1e <__prologue_saves__>:
 f1e:	2f 92       	push	r2
 f20:	3f 92       	push	r3
 f22:	4f 92       	push	r4
 f24:	5f 92       	push	r5
 f26:	6f 92       	push	r6
 f28:	7f 92       	push	r7
 f2a:	8f 92       	push	r8
 f2c:	9f 92       	push	r9
 f2e:	af 92       	push	r10
 f30:	bf 92       	push	r11
 f32:	cf 92       	push	r12
 f34:	df 92       	push	r13
 f36:	ef 92       	push	r14
 f38:	ff 92       	push	r15
 f3a:	0f 93       	push	r16
 f3c:	1f 93       	push	r17
 f3e:	cf 93       	push	r28
 f40:	df 93       	push	r29
 f42:	cd b7       	in	r28, 0x3d	; 61
 f44:	de b7       	in	r29, 0x3e	; 62
 f46:	ca 1b       	sub	r28, r26
 f48:	db 0b       	sbc	r29, r27
 f4a:	0f b6       	in	r0, 0x3f	; 63
 f4c:	f8 94       	cli
 f4e:	de bf       	out	0x3e, r29	; 62
 f50:	0f be       	out	0x3f, r0	; 63
 f52:	cd bf       	out	0x3d, r28	; 61
 f54:	09 94       	ijmp

00000f56 <__epilogue_restores__>:
 f56:	2a 88       	ldd	r2, Y+18	; 0x12
 f58:	39 88       	ldd	r3, Y+17	; 0x11
 f5a:	48 88       	ldd	r4, Y+16	; 0x10
 f5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f60:	7d 84       	ldd	r7, Y+13	; 0x0d
 f62:	8c 84       	ldd	r8, Y+12	; 0x0c
 f64:	9b 84       	ldd	r9, Y+11	; 0x0b
 f66:	aa 84       	ldd	r10, Y+10	; 0x0a
 f68:	b9 84       	ldd	r11, Y+9	; 0x09
 f6a:	c8 84       	ldd	r12, Y+8	; 0x08
 f6c:	df 80       	ldd	r13, Y+7	; 0x07
 f6e:	ee 80       	ldd	r14, Y+6	; 0x06
 f70:	fd 80       	ldd	r15, Y+5	; 0x05
 f72:	0c 81       	ldd	r16, Y+4	; 0x04
 f74:	1b 81       	ldd	r17, Y+3	; 0x03
 f76:	aa 81       	ldd	r26, Y+2	; 0x02
 f78:	b9 81       	ldd	r27, Y+1	; 0x01
 f7a:	ce 0f       	add	r28, r30
 f7c:	d1 1d       	adc	r29, r1
 f7e:	0f b6       	in	r0, 0x3f	; 63
 f80:	f8 94       	cli
 f82:	de bf       	out	0x3e, r29	; 62
 f84:	0f be       	out	0x3f, r0	; 63
 f86:	cd bf       	out	0x3d, r28	; 61
 f88:	ed 01       	movw	r28, r26
 f8a:	08 95       	ret

00000f8c <_exit>:
 f8c:	f8 94       	cli

00000f8e <__stop_program>:
 f8e:	ff cf       	rjmp	.-2      	; 0xf8e <__stop_program>
