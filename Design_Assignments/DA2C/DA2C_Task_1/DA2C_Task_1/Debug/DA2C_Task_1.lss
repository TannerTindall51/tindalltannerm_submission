
DA2C_Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  000014bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
#define F_CPU 16000000UL
#include <avr/io.h>

int main(void)
{
	DDRB = 0xFF;							//sets DDRB to OUTPUT
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;							//sets DDRC to INPUT
  d0:	17 b8       	out	0x07, r1	; 7
	PORTB = 0xFF;							//sets all of PORTB logic level HIGH
  d2:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 0x00;							//initializes the 8 bit timer0 register to begin at 0
  d4:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;							//sets the timer to "Normal" Mode by WGM00
  d6:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);	//sets prescaler value to 1024, refer to TCCROB truthTable
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
					}
				}
				PORTB |= (1<<2);			//turn off LED at PB2
			}
		}
		PORTB ^= (1<<3);					//inverts LED for each execution of the loop to produce strobe
  de:	98 e0       	ldi	r25, 0x08	; 8
	TCCR0B |= (1 << CS02) | (1 << CS00);	//sets prescaler value to 1024, refer to TCCROB truthTable
	int overFlow = 0;						//initializes variable to be used as counter for overflow occurrences
	
	while (1)								//primary (infinite) loop for the program
	{
		TCNT0 = 0x00;						//resetting the timer to 0 when the code loops back up
  e0:	16 bc       	out	0x26, r1	; 38
		overFlow = 0;						//resetting the counter to 0 when the code loops back up
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
		
		while(overFlow < 25)				//55% DutyCycle Loop (.75s = 45 therefore 55% * 45 = 25)
		{
			if(TCNT0 ==0xFF)				//once the timer reaches the max value...
  e6:	86 b5       	in	r24, 0x26	; 38
  e8:	8f 3f       	cpi	r24, 0xFF	; 255
  ea:	21 f4       	brne	.+8      	; 0xf4 <main+0x28>
			{
				TCNT0 = 0x00;				//...reset it and...
  ec:	16 bc       	out	0x26, r1	; 38
				overFlow++;					//...add to the overflow counter and begin again
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	17 c0       	rjmp	.+46     	; 0x122 <main+0x56>
			}
			
			else if(!(PINC & (1 << 3)))		//checks to see if SW3 is pressed
  f4:	33 99       	sbic	0x06, 3	; 6
  f6:	15 c0       	rjmp	.+42     	; 0x122 <main+0x56>
			{
				PORTB |= (1<<3);			//turns off LED at PB3
  f8:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &= ~(1<<2);			//turns on LED PB2
  fa:	2a 98       	cbi	0x05, 2	; 5
				overFlow = 0;				//reset overflow counter
				TCNT0 = 0x00;				//reset timer
  fc:	16 bc       	out	0x26, r1	; 38
  fe:	28 e7       	ldi	r18, 0x78	; 120
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <main+0x46>
				
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
				{
					if(TCNT0 ==0xFF)		//once the timer reaches the max value...
 104:	86 b5       	in	r24, 0x26	; 38
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	e9 f7       	brne	.-6      	; 0x104 <main+0x38>
					{
						TCNT0 = 0x00;		//...reset it and...
 10a:	16 bc       	out	0x26, r1	; 38
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
				PORTB |= (1<<3);			//turns off LED at PB3
				PORTB &= ~(1<<2);			//turns on LED PB2
				overFlow = 0;				//reset overflow counter
				TCNT0 = 0x00;				//reset timer
				
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
 110:	21 f0       	breq	.+8      	; 0x11a <main+0x4e>
				{
					if(TCNT0 ==0xFF)		//once the timer reaches the max value...
 112:	86 b5       	in	r24, 0x26	; 38
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	b1 f7       	brne	.-20     	; 0x104 <main+0x38>
 118:	f8 cf       	rjmp	.-16     	; 0x10a <main+0x3e>
					{
						TCNT0 = 0x00;		//...reset it and...
						overFlow++;			//...add to the overflow counter and begin again
					}
				}
				PORTB |= (1<<2);			//turns off LED at PB2
 11a:	2a 9a       	sbi	0x05, 2	; 5
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
				{
					if(TCNT0 ==0xFF)		//once the timer reaches the max value...
					{
						TCNT0 = 0x00;		//...reset it and...
						overFlow++;			//...add to the overflow counter and begin again
 11c:	28 e7       	ldi	r18, 0x78	; 120
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <main+0x5c>
	while (1)								//primary (infinite) loop for the program
	{
		TCNT0 = 0x00;						//resetting the timer to 0 when the code loops back up
		overFlow = 0;						//resetting the counter to 0 when the code loops back up
		
		while(overFlow < 25)				//55% DutyCycle Loop (.75s = 45 therefore 55% * 45 = 25)
 122:	29 31       	cpi	r18, 0x19	; 25
 124:	31 05       	cpc	r19, r1
 126:	fc f2       	brlt	.-66     	; 0xe6 <main+0x1a>
				}
				PORTB |= (1<<2);			//turns off LED at PB2
			}
		}
		
		while (overFlow < 20)				//55% DutyCycle Loop (.75s = 45 therefore 45% * 45 = 20)
 128:	24 31       	cpi	r18, 0x14	; 20
 12a:	31 05       	cpc	r19, r1
 12c:	24 f5       	brge	.+72     	; 0x176 <main+0xaa>
		{
			if(TCNT0 ==0xFF)				//once the timer reaches the max value...
 12e:	86 b5       	in	r24, 0x26	; 38
 130:	8f 3f       	cpi	r24, 0xFF	; 255
 132:	21 f4       	brne	.+8      	; 0x13c <main+0x70>
			{
				TCNT0 = 0x00;				//...reset it and...
 134:	16 bc       	out	0x26, r1	; 38
				overFlow++;					//...add to the overflow counter and begin again
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	1a c0       	rjmp	.+52     	; 0x170 <main+0xa4>
			}
			
			else if(!(PINC & (1 << 3)))
 13c:	33 99       	sbic	0x06, 3	; 6
 13e:	18 c0       	rjmp	.+48     	; 0x170 <main+0xa4>
			{
				PORTB |= (1 << 3);			//turn off LED at PB3
 140:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &= ~(1 << 2);			//turn on LED at PB2
 142:	2a 98       	cbi	0x05, 2	; 5
				overFlow = 0;				//reset overflow counter
				TCNT0 = 0x00;				//reset timer
 144:	16 bc       	out	0x26, r1	; 38
			
			else if(!(PINC & (1 << 3)))
			{
				PORTB |= (1 << 3);			//turn off LED at PB3
				PORTB &= ~(1 << 2);			//turn on LED at PB2
				overFlow = 0;				//reset overflow counter
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	0d c0       	rjmp	.+26     	; 0x166 <main+0x9a>
				TCNT0 = 0x00;				//reset timer
				
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
				{
					if(TCNT0 == 0xFF)		//once the timer reaches the max value...
 14c:	86 b5       	in	r24, 0x26	; 38
 14e:	8f 3f       	cpi	r24, 0xFF	; 255
 150:	21 f0       	breq	.+8      	; 0x15a <main+0x8e>
				PORTB |= (1 << 3);			//turn off LED at PB3
				PORTB &= ~(1 << 2);			//turn on LED at PB2
				overFlow = 0;				//reset overflow counter
				TCNT0 = 0x00;				//reset timer
				
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
 152:	28 37       	cpi	r18, 0x78	; 120
 154:	31 05       	cpc	r19, r1
 156:	d4 f3       	brlt	.-12     	; 0x14c <main+0x80>
 158:	0a c0       	rjmp	.+20     	; 0x16e <main+0xa2>
				{
					if(TCNT0 == 0xFF)		//once the timer reaches the max value...
					{
						TCNT0 = 0x00;		//...reset it and...
 15a:	16 bc       	out	0x26, r1	; 38
						overFlow++;			//...add to the overflow counter and begin again
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
				PORTB |= (1 << 3);			//turn off LED at PB3
				PORTB &= ~(1 << 2);			//turn on LED at PB2
				overFlow = 0;				//reset overflow counter
				TCNT0 = 0x00;				//reset timer
				
				while(overFlow < 120)		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
 160:	28 37       	cpi	r18, 0x78	; 120
 162:	31 05       	cpc	r19, r1
 164:	21 f0       	breq	.+8      	; 0x16e <main+0xa2>
				{
					if(TCNT0 == 0xFF)		//once the timer reaches the max value...
 166:	86 b5       	in	r24, 0x26	; 38
 168:	8f 3f       	cpi	r24, 0xFF	; 255
 16a:	81 f7       	brne	.-32     	; 0x14c <main+0x80>
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <main+0x8e>
					{
						TCNT0 = 0x00;		//...reset it and...
						overFlow++;			//...add to the overflow counter and begin again
					}
				}
				PORTB |= (1<<2);			//turn off LED at PB2
 16e:	2a 9a       	sbi	0x05, 2	; 5
				}
				PORTB |= (1<<2);			//turns off LED at PB2
			}
		}
		
		while (overFlow < 20)				//55% DutyCycle Loop (.75s = 45 therefore 45% * 45 = 20)
 170:	24 31       	cpi	r18, 0x14	; 20
 172:	31 05       	cpc	r19, r1
 174:	e4 f2       	brlt	.-72     	; 0x12e <main+0x62>
					}
				}
				PORTB |= (1<<2);			//turn off LED at PB2
			}
		}
		PORTB ^= (1<<3);					//inverts LED for each execution of the loop to produce strobe
 176:	85 b1       	in	r24, 0x05	; 5
 178:	89 27       	eor	r24, r25
 17a:	85 b9       	out	0x05, r24	; 5
	}
 17c:	b1 cf       	rjmp	.-158    	; 0xe0 <main+0x14>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
