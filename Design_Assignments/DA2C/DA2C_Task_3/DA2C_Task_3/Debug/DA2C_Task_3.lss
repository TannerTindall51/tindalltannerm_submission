
DA2C_Task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b1  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f2  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ec       	ldi	r30, 0xC0	; 192
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 30       	cpi	r26, 0x04	; 4
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
volatile int overFlow_Count = 0;		//initializes variable to be used as counter for overflow occurrences
volatile int overFlow_Max = 21;			//45% Duty Cycle @337.5ms (((16MHz/1024) * .3375)/256) = 21

int main(void)
{
	DDRB = 0xFF;						//sets DDRB to OUTPUT
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;						//sets DDRC to INPUT
  f6:	17 b8       	out	0x07, r1	; 7
	PORTB = 0xFF;						//sets all of PORTB logic level HIGH
  f8:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 0;							//initializes the 8 bit timer0 register to begin at 0
  fa:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x02;						//sets the timer to "CTC" Mode by setting WGM01 high
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);//sets prescaler value to 1024, refer to TCCROB truthTable
 100:	25 e0       	ldi	r18, 0x05	; 5
 102:	25 bd       	out	0x25, r18	; 37
	TIMSK0 = (1<<OCIE1A);				//enable timer0 overflow interrupt
 104:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	OCR0A = 255;
 108:	87 bd       	out	0x27, r24	; 39
	sei();								//turn on interrupts 
 10a:	78 94       	sei
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x1a>

0000010e <__vector_14>:
	{
		
	}
}
	ISR (TIMER0_COMPA_vect)
	{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
		overFlow_Count++;				//increments the counter upon interrupt
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 124:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		
		if (overFlow_Count == overFlow_Max) //comparison between counter and counterMax values
 132:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 136:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	81 f5       	brne	.+96     	; 0x1a8 <__vector_14+0x9a>
		{
			PORTB ^= (1<<3);			//toggle LED at PB3
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	89 27       	eor	r24, r25
 14e:	85 b9       	out	0x05, r24	; 5
			PORTB |=(1<<2);				//turn off LED at PB2
 150:	2a 9a       	sbi	0x05, 2	; 5
			
			if(overFlow_Max == 21)		//if 45% DutyCycle, then begin this statement 
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15a:	45 97       	sbiw	r24, 0x15	; 21
 15c:	89 f4       	brne	.+34     	; 0x180 <__vector_14+0x72>
			{
				overFlow_Max = 25;		//change max counter to 55% Duty Cycle @412.5ms (((16MHz/1024) * .4125)/256) = 25
 15e:	89 e1       	ldi	r24, 0x19	; 25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				if(!(PINC & (1<<3)))	//checks to see if SW3 is pressed
 16a:	33 99       	sbic	0x06, 3	; 6
 16c:	19 c0       	rjmp	.+50     	; 0x1a0 <__vector_14+0x92>
				{
				PORTB &= ~(1<<2);		//turns on LED at PB2
 16e:	2a 98       	cbi	0x05, 2	; 5
				overFlow_Max = 120;		//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
 170:	88 e7       	ldi	r24, 0x78	; 120
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				PORTB |= (1<<3);		//turns off LED at PB3
 17c:	2b 9a       	sbi	0x05, 3	; 5
 17e:	10 c0       	rjmp	.+32     	; 0x1a0 <__vector_14+0x92>
				}
			} 
			
			else						//if 55% DutyCycle, then begin this statement
			{
				overFlow_Max = 21;		//reset back to 45% DutyCycle for next iteration
 180:	85 e1       	ldi	r24, 0x15	; 21
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				if(!(PINC & (1<<3)))	//checks to see if SW3 is pressed
 18c:	33 99       	sbic	0x06, 3	; 6
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <__vector_14+0x92>
				{
					PORTB &= ~(1<<2);	//turns on LED at PB2
 190:	2a 98       	cbi	0x05, 2	; 5
					overFlow_Max = 120;	//2s Delay Loop (1 sec = 60 therefore 2 * 60 = 120)
 192:	88 e7       	ldi	r24, 0x78	; 120
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					PORTB |= (1<<3);	//turns off LED at PB3
 19e:	2b 9a       	sbi	0x05, 3	; 5
				}
			}
			overFlow_Count = 0;			//resetting counter
 1a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		}
		TCNT0 = 0;						//resetting timer
 1a8:	16 bc       	out	0x26, r1	; 38
	}
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
