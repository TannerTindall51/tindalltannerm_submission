
DA4B_T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae3  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  d4:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <startADC>:

volatile float Value;

void startADC()
{
	ADMUX = (1<<REFS0);
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC, set prescalar to 128
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <adcRead>:
}

float adcRead()
{
	ADCSRA |= (1<<6);				//enable ADC conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	while (!(ADCSRA & (1<<4)));		//waits for conversion to complete by ADIF flag
  f4:	80 81       	ld	r24, Z
  f6:	84 ff       	sbrs	r24, 4
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <adcRead+0xa>
	ADCSRA |= (1<<4);				//reset when complete
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 61       	ori	r24, 0x10	; 16
 102:	80 83       	st	Z, r24
	return ADC;						//return value once complete
 104:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 108:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 a3 01 	call	0x346	; 0x346 <__floatunsisf>
}
 114:	08 95       	ret

00000116 <timer>:

void timer()
{
	TCCR1A |= (1<<COM1A1)| (1<<COM1B1)| (1<<WGM11);	//clear OC1 and OCRA on match
 116:	e0 e8       	ldi	r30, 0x80	; 128
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	82 6a       	ori	r24, 0xA2	; 162
 11e:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11) |(1<<CS10);	//CTC mode with ICR1 as top, set prescalar to 64
 120:	e1 e8       	ldi	r30, 0x81	; 129
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8b 61       	ori	r24, 0x1B	; 27
 128:	80 83       	st	Z, r24
	ICR1 = 4999;
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	93 e1       	ldi	r25, 0x13	; 19
 12e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 132:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 136:	08 95       	ret

00000138 <adcVal>:
}

uint16_t adcVal()
{
	Value = adcRead()/1023;
 138:	0e 94 75 00 	call	0xea	; 0xea <adcRead>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 ec       	ldi	r19, 0xC0	; 192
 140:	4f e7       	ldi	r20, 0x7F	; 127
 142:	54 e4       	ldi	r21, 0x44	; 68
 144:	0e 94 02 01 	call	0x204	; 0x204 <__divsf3>
 148:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 14c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 154:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	return Value;
 158:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 15c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 168:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
}
 16c:	cb 01       	movw	r24, r22
 16e:	08 95       	ret

00000170 <main>:

int main()
{
	DDRB &= (1<<PINB2);		//set PD0:3 as output to driver
 170:	84 b1       	in	r24, 0x04	; 4
 172:	84 70       	andi	r24, 0x04	; 4
 174:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1<<PINC0);	//set PC0 to input for ADC values
 176:	38 98       	cbi	0x07, 0	; 7
	timer();
 178:	0e 94 8b 00 	call	0x116	; 0x116 <timer>
	startADC();
 17c:	0e 94 6e 00 	call	0xdc	; 0xdc <startADC>
			OCR1A = 0;			//0
			_delay_ms(20);		//time needed for proper servo instruction
		}
		else if (Value == 255) 	//max value (already prescaled)
		{
			OCR1A = 535;		//180
 180:	c8 e8       	ldi	r28, 0x88	; 136
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	07 e1       	ldi	r16, 0x17	; 23
 186:	12 e0       	ldi	r17, 0x02	; 2
	timer();
	startADC();
	
	while(1)
	{
		adcVal();			//collect a value from the ADC
 188:	0e 94 9c 00 	call	0x138	; 0x138 <adcVal>
		
		if (Value == 0) 	//min value
 18c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 190:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 194:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 198:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
 1a2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__cmpsf2>
 1a6:	81 11       	cpse	r24, r1
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <main+0x52>
		{
			OCR1A = 0;			//0
 1aa:	19 82       	std	Y+1, r1	; 0x01
 1ac:	18 82       	st	Y, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x44>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x4e>
 1be:	00 00       	nop
 1c0:	e3 cf       	rjmp	.-58     	; 0x188 <main+0x18>
			_delay_ms(20);		//time needed for proper servo instruction
		}
		else if (Value == 255) 	//max value (already prescaled)
 1c2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1c6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 1ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	4f e7       	ldi	r20, 0x7F	; 127
 1d8:	53 e4       	ldi	r21, 0x43	; 67
 1da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__cmpsf2>
 1de:	81 11       	cpse	r24, r1
 1e0:	d3 cf       	rjmp	.-90     	; 0x188 <main+0x18>
		{
			OCR1A = 535;		//180
 1e2:	19 83       	std	Y+1, r17	; 0x01
 1e4:	08 83       	st	Y, r16
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x7c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x86>
 1f6:	00 00       	nop
 1f8:	c7 cf       	rjmp	.-114    	; 0x188 <main+0x18>

000001fa <__cmpsf2>:
 1fa:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_cmp>
 1fe:	08 f4       	brcc	.+2      	; 0x202 <__cmpsf2+0x8>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret

00000204 <__divsf3>:
 204:	0e 94 16 01 	call	0x22c	; 0x22c <__divsf3x>
 208:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_round>
 20c:	0e 94 14 02 	call	0x428	; 0x428 <__fp_pscB>
 210:	58 f0       	brcs	.+22     	; 0x228 <__divsf3+0x24>
 212:	0e 94 0d 02 	call	0x41a	; 0x41a <__fp_pscA>
 216:	40 f0       	brcs	.+16     	; 0x228 <__divsf3+0x24>
 218:	29 f4       	brne	.+10     	; 0x224 <__divsf3+0x20>
 21a:	5f 3f       	cpi	r21, 0xFF	; 255
 21c:	29 f0       	breq	.+10     	; 0x228 <__divsf3+0x24>
 21e:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_inf>
 222:	51 11       	cpse	r21, r1
 224:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_szero>
 228:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_nan>

0000022c <__divsf3x>:
 22c:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_split3>
 230:	68 f3       	brcs	.-38     	; 0x20c <__divsf3+0x8>

00000232 <__divsf3_pse>:
 232:	99 23       	and	r25, r25
 234:	b1 f3       	breq	.-20     	; 0x222 <__divsf3+0x1e>
 236:	55 23       	and	r21, r21
 238:	91 f3       	breq	.-28     	; 0x21e <__divsf3+0x1a>
 23a:	95 1b       	sub	r25, r21
 23c:	55 0b       	sbc	r21, r21
 23e:	bb 27       	eor	r27, r27
 240:	aa 27       	eor	r26, r26
 242:	62 17       	cp	r22, r18
 244:	73 07       	cpc	r23, r19
 246:	84 07       	cpc	r24, r20
 248:	38 f0       	brcs	.+14     	; 0x258 <__divsf3_pse+0x26>
 24a:	9f 5f       	subi	r25, 0xFF	; 255
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	22 0f       	add	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	44 1f       	adc	r20, r20
 254:	aa 1f       	adc	r26, r26
 256:	a9 f3       	breq	.-22     	; 0x242 <__divsf3_pse+0x10>
 258:	35 d0       	rcall	.+106    	; 0x2c4 <__divsf3_pse+0x92>
 25a:	0e 2e       	mov	r0, r30
 25c:	3a f0       	brmi	.+14     	; 0x26c <__divsf3_pse+0x3a>
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	32 d0       	rcall	.+100    	; 0x2c6 <__divsf3_pse+0x94>
 262:	91 50       	subi	r25, 0x01	; 1
 264:	50 40       	sbci	r21, 0x00	; 0
 266:	e6 95       	lsr	r30
 268:	00 1c       	adc	r0, r0
 26a:	ca f7       	brpl	.-14     	; 0x25e <__divsf3_pse+0x2c>
 26c:	2b d0       	rcall	.+86     	; 0x2c4 <__divsf3_pse+0x92>
 26e:	fe 2f       	mov	r31, r30
 270:	29 d0       	rcall	.+82     	; 0x2c4 <__divsf3_pse+0x92>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	88 1f       	adc	r24, r24
 278:	bb 1f       	adc	r27, r27
 27a:	26 17       	cp	r18, r22
 27c:	37 07       	cpc	r19, r23
 27e:	48 07       	cpc	r20, r24
 280:	ab 07       	cpc	r26, r27
 282:	b0 e8       	ldi	r27, 0x80	; 128
 284:	09 f0       	breq	.+2      	; 0x288 <__divsf3_pse+0x56>
 286:	bb 0b       	sbc	r27, r27
 288:	80 2d       	mov	r24, r0
 28a:	bf 01       	movw	r22, r30
 28c:	ff 27       	eor	r31, r31
 28e:	93 58       	subi	r25, 0x83	; 131
 290:	5f 4f       	sbci	r21, 0xFF	; 255
 292:	3a f0       	brmi	.+14     	; 0x2a2 <__divsf3_pse+0x70>
 294:	9e 3f       	cpi	r25, 0xFE	; 254
 296:	51 05       	cpc	r21, r1
 298:	78 f0       	brcs	.+30     	; 0x2b8 <__divsf3_pse+0x86>
 29a:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_inf>
 29e:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_szero>
 2a2:	5f 3f       	cpi	r21, 0xFF	; 255
 2a4:	e4 f3       	brlt	.-8      	; 0x29e <__divsf3_pse+0x6c>
 2a6:	98 3e       	cpi	r25, 0xE8	; 232
 2a8:	d4 f3       	brlt	.-12     	; 0x29e <__divsf3_pse+0x6c>
 2aa:	86 95       	lsr	r24
 2ac:	77 95       	ror	r23
 2ae:	67 95       	ror	r22
 2b0:	b7 95       	ror	r27
 2b2:	f7 95       	ror	r31
 2b4:	9f 5f       	subi	r25, 0xFF	; 255
 2b6:	c9 f7       	brne	.-14     	; 0x2aa <__divsf3_pse+0x78>
 2b8:	88 0f       	add	r24, r24
 2ba:	91 1d       	adc	r25, r1
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	97 f9       	bld	r25, 7
 2c2:	08 95       	ret
 2c4:	e1 e0       	ldi	r30, 0x01	; 1
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	88 1f       	adc	r24, r24
 2cc:	bb 1f       	adc	r27, r27
 2ce:	62 17       	cp	r22, r18
 2d0:	73 07       	cpc	r23, r19
 2d2:	84 07       	cpc	r24, r20
 2d4:	ba 07       	cpc	r27, r26
 2d6:	20 f0       	brcs	.+8      	; 0x2e0 <__divsf3_pse+0xae>
 2d8:	62 1b       	sub	r22, r18
 2da:	73 0b       	sbc	r23, r19
 2dc:	84 0b       	sbc	r24, r20
 2de:	ba 0b       	sbc	r27, r26
 2e0:	ee 1f       	adc	r30, r30
 2e2:	88 f7       	brcc	.-30     	; 0x2c6 <__divsf3_pse+0x94>
 2e4:	e0 95       	com	r30
 2e6:	08 95       	ret

000002e8 <__fixunssfsi>:
 2e8:	0e 94 34 02 	call	0x468	; 0x468 <__fp_splitA>
 2ec:	88 f0       	brcs	.+34     	; 0x310 <__fixunssfsi+0x28>
 2ee:	9f 57       	subi	r25, 0x7F	; 127
 2f0:	98 f0       	brcs	.+38     	; 0x318 <__fixunssfsi+0x30>
 2f2:	b9 2f       	mov	r27, r25
 2f4:	99 27       	eor	r25, r25
 2f6:	b7 51       	subi	r27, 0x17	; 23
 2f8:	b0 f0       	brcs	.+44     	; 0x326 <__fixunssfsi+0x3e>
 2fa:	e1 f0       	breq	.+56     	; 0x334 <__fixunssfsi+0x4c>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a f0       	brmi	.+6      	; 0x30c <__fixunssfsi+0x24>
 306:	ba 95       	dec	r27
 308:	c9 f7       	brne	.-14     	; 0x2fc <__fixunssfsi+0x14>
 30a:	14 c0       	rjmp	.+40     	; 0x334 <__fixunssfsi+0x4c>
 30c:	b1 30       	cpi	r27, 0x01	; 1
 30e:	91 f0       	breq	.+36     	; 0x334 <__fixunssfsi+0x4c>
 310:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_zero>
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	08 95       	ret
 318:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_zero>
 31c:	67 2f       	mov	r22, r23
 31e:	78 2f       	mov	r23, r24
 320:	88 27       	eor	r24, r24
 322:	b8 5f       	subi	r27, 0xF8	; 248
 324:	39 f0       	breq	.+14     	; 0x334 <__fixunssfsi+0x4c>
 326:	b9 3f       	cpi	r27, 0xF9	; 249
 328:	cc f3       	brlt	.-14     	; 0x31c <__fixunssfsi+0x34>
 32a:	86 95       	lsr	r24
 32c:	77 95       	ror	r23
 32e:	67 95       	ror	r22
 330:	b3 95       	inc	r27
 332:	d9 f7       	brne	.-10     	; 0x32a <__fixunssfsi+0x42>
 334:	3e f4       	brtc	.+14     	; 0x344 <__fixunssfsi+0x5c>
 336:	90 95       	com	r25
 338:	80 95       	com	r24
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__floatunsisf>:
 346:	e8 94       	clt
 348:	09 c0       	rjmp	.+18     	; 0x35c <__floatsisf+0x12>

0000034a <__floatsisf>:
 34a:	97 fb       	bst	r25, 7
 34c:	3e f4       	brtc	.+14     	; 0x35c <__floatsisf+0x12>
 34e:	90 95       	com	r25
 350:	80 95       	com	r24
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	99 23       	and	r25, r25
 35e:	a9 f0       	breq	.+42     	; 0x38a <__floatsisf+0x40>
 360:	f9 2f       	mov	r31, r25
 362:	96 e9       	ldi	r25, 0x96	; 150
 364:	bb 27       	eor	r27, r27
 366:	93 95       	inc	r25
 368:	f6 95       	lsr	r31
 36a:	87 95       	ror	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	f1 11       	cpse	r31, r1
 374:	f8 cf       	rjmp	.-16     	; 0x366 <__floatsisf+0x1c>
 376:	fa f4       	brpl	.+62     	; 0x3b6 <__floatsisf+0x6c>
 378:	bb 0f       	add	r27, r27
 37a:	11 f4       	brne	.+4      	; 0x380 <__floatsisf+0x36>
 37c:	60 ff       	sbrs	r22, 0
 37e:	1b c0       	rjmp	.+54     	; 0x3b6 <__floatsisf+0x6c>
 380:	6f 5f       	subi	r22, 0xFF	; 255
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	16 c0       	rjmp	.+44     	; 0x3b6 <__floatsisf+0x6c>
 38a:	88 23       	and	r24, r24
 38c:	11 f0       	breq	.+4      	; 0x392 <__floatsisf+0x48>
 38e:	96 e9       	ldi	r25, 0x96	; 150
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <__floatsisf+0x6a>
 392:	77 23       	and	r23, r23
 394:	21 f0       	breq	.+8      	; 0x39e <__floatsisf+0x54>
 396:	9e e8       	ldi	r25, 0x8E	; 142
 398:	87 2f       	mov	r24, r23
 39a:	76 2f       	mov	r23, r22
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <__floatsisf+0x5e>
 39e:	66 23       	and	r22, r22
 3a0:	71 f0       	breq	.+28     	; 0x3be <__floatsisf+0x74>
 3a2:	96 e8       	ldi	r25, 0x86	; 134
 3a4:	86 2f       	mov	r24, r22
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	2a f0       	brmi	.+10     	; 0x3b6 <__floatsisf+0x6c>
 3ac:	9a 95       	dec	r25
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	da f7       	brpl	.-10     	; 0x3ac <__floatsisf+0x62>
 3b6:	88 0f       	add	r24, r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	97 f9       	bld	r25, 7
 3be:	08 95       	ret

000003c0 <__fp_cmp>:
 3c0:	99 0f       	add	r25, r25
 3c2:	00 08       	sbc	r0, r0
 3c4:	55 0f       	add	r21, r21
 3c6:	aa 0b       	sbc	r26, r26
 3c8:	e0 e8       	ldi	r30, 0x80	; 128
 3ca:	fe ef       	ldi	r31, 0xFE	; 254
 3cc:	16 16       	cp	r1, r22
 3ce:	17 06       	cpc	r1, r23
 3d0:	e8 07       	cpc	r30, r24
 3d2:	f9 07       	cpc	r31, r25
 3d4:	c0 f0       	brcs	.+48     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d6:	12 16       	cp	r1, r18
 3d8:	13 06       	cpc	r1, r19
 3da:	e4 07       	cpc	r30, r20
 3dc:	f5 07       	cpc	r31, r21
 3de:	98 f0       	brcs	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3e0:	62 1b       	sub	r22, r18
 3e2:	73 0b       	sbc	r23, r19
 3e4:	84 0b       	sbc	r24, r20
 3e6:	95 0b       	sbc	r25, r21
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <__fp_cmp+0x38>
 3ea:	0a 26       	eor	r0, r26
 3ec:	61 f0       	breq	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ee:	23 2b       	or	r18, r19
 3f0:	24 2b       	or	r18, r20
 3f2:	25 2b       	or	r18, r21
 3f4:	21 f4       	brne	.+8      	; 0x3fe <__fp_cmp+0x3e>
 3f6:	08 95       	ret
 3f8:	0a 26       	eor	r0, r26
 3fa:	09 f4       	brne	.+2      	; 0x3fe <__fp_cmp+0x3e>
 3fc:	a1 40       	sbci	r26, 0x01	; 1
 3fe:	a6 95       	lsr	r26
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	81 1d       	adc	r24, r1
 404:	81 1d       	adc	r24, r1
 406:	08 95       	ret

00000408 <__fp_inf>:
 408:	97 f9       	bld	r25, 7
 40a:	9f 67       	ori	r25, 0x7F	; 127
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	08 95       	ret

00000414 <__fp_nan>:
 414:	9f ef       	ldi	r25, 0xFF	; 255
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	08 95       	ret

0000041a <__fp_pscA>:
 41a:	00 24       	eor	r0, r0
 41c:	0a 94       	dec	r0
 41e:	16 16       	cp	r1, r22
 420:	17 06       	cpc	r1, r23
 422:	18 06       	cpc	r1, r24
 424:	09 06       	cpc	r0, r25
 426:	08 95       	ret

00000428 <__fp_pscB>:
 428:	00 24       	eor	r0, r0
 42a:	0a 94       	dec	r0
 42c:	12 16       	cp	r1, r18
 42e:	13 06       	cpc	r1, r19
 430:	14 06       	cpc	r1, r20
 432:	05 06       	cpc	r0, r21
 434:	08 95       	ret

00000436 <__fp_round>:
 436:	09 2e       	mov	r0, r25
 438:	03 94       	inc	r0
 43a:	00 0c       	add	r0, r0
 43c:	11 f4       	brne	.+4      	; 0x442 <__fp_round+0xc>
 43e:	88 23       	and	r24, r24
 440:	52 f0       	brmi	.+20     	; 0x456 <__fp_round+0x20>
 442:	bb 0f       	add	r27, r27
 444:	40 f4       	brcc	.+16     	; 0x456 <__fp_round+0x20>
 446:	bf 2b       	or	r27, r31
 448:	11 f4       	brne	.+4      	; 0x44e <__fp_round+0x18>
 44a:	60 ff       	sbrs	r22, 0
 44c:	04 c0       	rjmp	.+8      	; 0x456 <__fp_round+0x20>
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	08 95       	ret

00000458 <__fp_split3>:
 458:	57 fd       	sbrc	r21, 7
 45a:	90 58       	subi	r25, 0x80	; 128
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	59 f0       	breq	.+22     	; 0x478 <__fp_splitA+0x10>
 462:	5f 3f       	cpi	r21, 0xFF	; 255
 464:	71 f0       	breq	.+28     	; 0x482 <__fp_splitA+0x1a>
 466:	47 95       	ror	r20

00000468 <__fp_splitA>:
 468:	88 0f       	add	r24, r24
 46a:	97 fb       	bst	r25, 7
 46c:	99 1f       	adc	r25, r25
 46e:	61 f0       	breq	.+24     	; 0x488 <__fp_splitA+0x20>
 470:	9f 3f       	cpi	r25, 0xFF	; 255
 472:	79 f0       	breq	.+30     	; 0x492 <__fp_splitA+0x2a>
 474:	87 95       	ror	r24
 476:	08 95       	ret
 478:	12 16       	cp	r1, r18
 47a:	13 06       	cpc	r1, r19
 47c:	14 06       	cpc	r1, r20
 47e:	55 1f       	adc	r21, r21
 480:	f2 cf       	rjmp	.-28     	; 0x466 <__fp_split3+0xe>
 482:	46 95       	lsr	r20
 484:	f1 df       	rcall	.-30     	; 0x468 <__fp_splitA>
 486:	08 c0       	rjmp	.+16     	; 0x498 <__fp_splitA+0x30>
 488:	16 16       	cp	r1, r22
 48a:	17 06       	cpc	r1, r23
 48c:	18 06       	cpc	r1, r24
 48e:	99 1f       	adc	r25, r25
 490:	f1 cf       	rjmp	.-30     	; 0x474 <__fp_splitA+0xc>
 492:	86 95       	lsr	r24
 494:	71 05       	cpc	r23, r1
 496:	61 05       	cpc	r22, r1
 498:	08 94       	sec
 49a:	08 95       	ret

0000049c <__fp_zero>:
 49c:	e8 94       	clt

0000049e <__fp_szero>:
 49e:	bb 27       	eor	r27, r27
 4a0:	66 27       	eor	r22, r22
 4a2:	77 27       	eor	r23, r23
 4a4:	cb 01       	movw	r24, r22
 4a6:	97 f9       	bld	r25, 7
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
