
DA4B_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000005da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a24  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <startADC>:

volatile float Value;

void startADC()
{
	ADMUX = (1<<REFS0);											
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC, set prescalar to 128
  e2:	87 e8       	ldi	r24, 0x87	; 135
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <adcRead>:
}

float adcRead()
{
	ADCSRA |= (1<<6);				//enable ADC conversion
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	while (!(ADCSRA & (1<<4)));		//waits for conversion to complete by ADIF flag
  f4:	80 81       	ld	r24, Z
  f6:	84 ff       	sbrs	r24, 4
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <adcRead+0xa>
	ADCSRA |= (1<<4);				//reset when complete
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 61       	ori	r24, 0x10	; 16
 102:	80 83       	st	Z, r24
	return ADC;						//return value once complete
 104:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 108:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__floatunsisf>
}
 114:	08 95       	ret

00000116 <timer>:

void timer()
{
	TCCR1A |= 0x00;								
 116:	e0 e8       	ldi	r30, 0x80	; 128
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)| (1<<CS12) | (1<<CS10);//set timer to CTC mode and set prescaler to 1024
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 60       	ori	r24, 0x0D	; 13
 126:	80 83       	st	Z, r24
	TIFR1 |= (1<<OCF1A);						//clear interrupt flag
 128:	b1 9a       	sbi	0x16, 1	; 22
	TCNT1 = 0x00;								//initialize timer
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 132:	08 95       	ret

00000134 <adcVal>:
}

uint16_t adcVal()
{
	Value = adcRead()/1023;
 134:	0e 94 75 00 	call	0xea	; 0xea <adcRead>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 ec       	ldi	r19, 0xC0	; 192
 13c:	4f e7       	ldi	r20, 0x7F	; 127
 13e:	54 e4       	ldi	r21, 0x44	; 68
 140:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__divsf3>
 144:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 148:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 150:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
	return Value;
 154:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 158:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 164:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fixunssfsi>
}
 168:	cb 01       	movw	r24, r22
 16a:	08 95       	ret

0000016c <main>:

int main()
{
	DDRD = 0x0F;					//set PD0:3 as output to driver
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1<<PINC0);		//set PC0 to input for ADC values
 170:	38 98       	cbi	0x07, 0	; 7
	timer();
 172:	0e 94 8b 00 	call	0x116	; 0x116 <timer>
	startADC();
 176:	0e 94 6e 00 	call	0xdc	; 0xdc <startADC>
		else if (Value <= 615)
			OCR1A = 389;		//25ms
		else if (Value <= 820)
			OCR1A = 780;		//50ms
		else if (Value <= 1024)
			OCR1A = 1562;		//100ms
 17a:	c8 e8       	ldi	r28, 0x88	; 136
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	0f 2e       	mov	r0, r31
 180:	fa e1       	ldi	r31, 0x1A	; 26
 182:	4f 2e       	mov	r4, r31
 184:	f6 e0       	ldi	r31, 0x06	; 6
 186:	5f 2e       	mov	r5, r31
 188:	f0 2d       	mov	r31, r0
		else if (Value <= 410)
			OCR1A = 155;		//10ms
		else if (Value <= 615)
			OCR1A = 389;		//25ms
		else if (Value <= 820)
			OCR1A = 780;		//50ms
 18a:	0f 2e       	mov	r0, r31
 18c:	fc e0       	ldi	r31, 0x0C	; 12
 18e:	af 2e       	mov	r10, r31
 190:	f3 e0       	ldi	r31, 0x03	; 3
 192:	bf 2e       	mov	r11, r31
 194:	f0 2d       	mov	r31, r0
		if (Value <= 205)		//the delays available are the following:
			OCR1A = 77;			//5ms
		else if (Value <= 410)
			OCR1A = 155;		//10ms
		else if (Value <= 615)
			OCR1A = 389;		//25ms
 196:	0f 2e       	mov	r0, r31
 198:	f5 e8       	ldi	r31, 0x85	; 133
 19a:	cf 2e       	mov	r12, r31
 19c:	dd 24       	eor	r13, r13
 19e:	d3 94       	inc	r13
 1a0:	f0 2d       	mov	r31, r0
		adcVal();				//collect a value from the ADC
								//setting delay times based on value received from ADC
		if (Value <= 205)		//the delays available are the following:
			OCR1A = 77;			//5ms
		else if (Value <= 410)
			OCR1A = 155;		//10ms
 1a2:	0f 2e       	mov	r0, r31
 1a4:	fb e9       	ldi	r31, 0x9B	; 155
 1a6:	ef 2e       	mov	r14, r31
 1a8:	f1 2c       	mov	r15, r1
 1aa:	f0 2d       	mov	r31, r0
	while(1)
	{
		adcVal();				//collect a value from the ADC
								//setting delay times based on value received from ADC
		if (Value <= 205)		//the delays available are the following:
			OCR1A = 77;			//5ms
 1ac:	0d e4       	ldi	r16, 0x4D	; 77
 1ae:	10 e0       	ldi	r17, 0x00	; 0
			OCR1A = 1562;		//100ms
		
		//the following while statements loop until the flag is set, then reset & continue
		
		while(!(TIFR1 & (1 << OCF1A)));
			PORTD = 0x0A;
 1b0:	0f 2e       	mov	r0, r31
 1b2:	fa e0       	ldi	r31, 0x0A	; 10
 1b4:	6f 2e       	mov	r6, r31
 1b6:	f0 2d       	mov	r31, r0
			TIFR1 |= (1 << OCF1A);
		while(!(TIFR1 & (1 << OCF1A)));
			PORTB = 0x06;
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f6 e0       	ldi	r31, 0x06	; 6
 1bc:	7f 2e       	mov	r7, r31
 1be:	f0 2d       	mov	r31, r0
			TIFR1 |= (1 << OCF1A);
		while(!(TIFR1 & (1 << OCF1A)));
			PORTD = 0x05;
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f5 e0       	ldi	r31, 0x05	; 5
 1c4:	8f 2e       	mov	r8, r31
 1c6:	f0 2d       	mov	r31, r0
			TIFR1 |= (1 << OCF1A);
		while(!(TIFR1 & (1 << OCF1A)));
			PORTD = 0x09;
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f9 e0       	ldi	r31, 0x09	; 9
 1cc:	9f 2e       	mov	r9, r31
 1ce:	f0 2d       	mov	r31, r0
	timer();
	startADC();
	
	while(1)
	{
		adcVal();				//collect a value from the ADC
 1d0:	0e 94 9a 00 	call	0x134	; 0x134 <adcVal>
								//setting delay times based on value received from ADC
		if (Value <= 205)		//the delays available are the following:
 1d4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1d8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 1dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 1e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4d e4       	ldi	r20, 0x4D	; 77
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__cmpsf2>
 1f0:	18 16       	cp	r1, r24
 1f2:	1c f0       	brlt	.+6      	; 0x1fa <main+0x8e>
			OCR1A = 77;			//5ms
 1f4:	19 83       	std	Y+1, r17	; 0x01
 1f6:	08 83       	st	Y, r16
 1f8:	4b c0       	rjmp	.+150    	; 0x290 <main+0x124>
		else if (Value <= 410)
 1fa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1fe:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	4d ec       	ldi	r20, 0xCD	; 205
 210:	53 e4       	ldi	r21, 0x43	; 67
 212:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__cmpsf2>
 216:	18 16       	cp	r1, r24
 218:	1c f0       	brlt	.+6      	; 0x220 <main+0xb4>
			OCR1A = 155;		//10ms
 21a:	f9 82       	std	Y+1, r15	; 0x01
 21c:	e8 82       	st	Y, r14
 21e:	38 c0       	rjmp	.+112    	; 0x290 <main+0x124>
		else if (Value <= 615)
 220:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 224:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 22c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 ec       	ldi	r19, 0xC0	; 192
 234:	49 e1       	ldi	r20, 0x19	; 25
 236:	54 e4       	ldi	r21, 0x44	; 68
 238:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__cmpsf2>
 23c:	18 16       	cp	r1, r24
 23e:	1c f0       	brlt	.+6      	; 0x246 <main+0xda>
			OCR1A = 389;		//25ms
 240:	d9 82       	std	Y+1, r13	; 0x01
 242:	c8 82       	st	Y, r12
 244:	25 c0       	rjmp	.+74     	; 0x290 <main+0x124>
		else if (Value <= 820)
 246:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 24a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 252:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	4d e4       	ldi	r20, 0x4D	; 77
 25c:	54 e4       	ldi	r21, 0x44	; 68
 25e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__cmpsf2>
 262:	18 16       	cp	r1, r24
 264:	1c f0       	brlt	.+6      	; 0x26c <main+0x100>
			OCR1A = 780;		//50ms
 266:	b9 82       	std	Y+1, r11	; 0x01
 268:	a8 82       	st	Y, r10
 26a:	12 c0       	rjmp	.+36     	; 0x290 <main+0x124>
		else if (Value <= 1024)
 26c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 270:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 278:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	54 e4       	ldi	r21, 0x44	; 68
 284:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__cmpsf2>
 288:	18 16       	cp	r1, r24
 28a:	14 f0       	brlt	.+4      	; 0x290 <main+0x124>
			OCR1A = 1562;		//100ms
 28c:	59 82       	std	Y+1, r5	; 0x01
 28e:	48 82       	st	Y, r4
		
		//the following while statements loop until the flag is set, then reset & continue
		
		while(!(TIFR1 & (1 << OCF1A)));
 290:	b1 9b       	sbis	0x16, 1	; 22
 292:	fe cf       	rjmp	.-4      	; 0x290 <main+0x124>
			PORTD = 0x0A;
 294:	6b b8       	out	0x0b, r6	; 11
			TIFR1 |= (1 << OCF1A);
 296:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 298:	b1 9b       	sbis	0x16, 1	; 22
 29a:	fe cf       	rjmp	.-4      	; 0x298 <main+0x12c>
			PORTB = 0x06;
 29c:	75 b8       	out	0x05, r7	; 5
			TIFR1 |= (1 << OCF1A);
 29e:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 2a0:	b1 9b       	sbis	0x16, 1	; 22
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x134>
			PORTD = 0x05;
 2a4:	8b b8       	out	0x0b, r8	; 11
			TIFR1 |= (1 << OCF1A);
 2a6:	b1 9a       	sbi	0x16, 1	; 22
		while(!(TIFR1 & (1 << OCF1A)));
 2a8:	b1 9b       	sbis	0x16, 1	; 22
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <main+0x13c>
			PORTD = 0x09;
 2ac:	9b b8       	out	0x0b, r9	; 11
			TIFR1 |= (1 << OCF1A);
 2ae:	b1 9a       	sbi	0x16, 1	; 22
	}
 2b0:	8f cf       	rjmp	.-226    	; 0x1d0 <main+0x64>

000002b2 <__cmpsf2>:
 2b2:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_cmp>
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <__cmpsf2+0x8>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret

000002bc <__divsf3>:
 2bc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divsf3x>
 2c0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_round>
 2c4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscB>
 2c8:	58 f0       	brcs	.+22     	; 0x2e0 <__divsf3+0x24>
 2ca:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_pscA>
 2ce:	40 f0       	brcs	.+16     	; 0x2e0 <__divsf3+0x24>
 2d0:	29 f4       	brne	.+10     	; 0x2dc <__divsf3+0x20>
 2d2:	5f 3f       	cpi	r21, 0xFF	; 255
 2d4:	29 f0       	breq	.+10     	; 0x2e0 <__divsf3+0x24>
 2d6:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 2da:	51 11       	cpse	r21, r1
 2dc:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 2e0:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__fp_nan>

000002e4 <__divsf3x>:
 2e4:	0e 94 88 02 	call	0x510	; 0x510 <__fp_split3>
 2e8:	68 f3       	brcs	.-38     	; 0x2c4 <__divsf3+0x8>

000002ea <__divsf3_pse>:
 2ea:	99 23       	and	r25, r25
 2ec:	b1 f3       	breq	.-20     	; 0x2da <__divsf3+0x1e>
 2ee:	55 23       	and	r21, r21
 2f0:	91 f3       	breq	.-28     	; 0x2d6 <__divsf3+0x1a>
 2f2:	95 1b       	sub	r25, r21
 2f4:	55 0b       	sbc	r21, r21
 2f6:	bb 27       	eor	r27, r27
 2f8:	aa 27       	eor	r26, r26
 2fa:	62 17       	cp	r22, r18
 2fc:	73 07       	cpc	r23, r19
 2fe:	84 07       	cpc	r24, r20
 300:	38 f0       	brcs	.+14     	; 0x310 <__divsf3_pse+0x26>
 302:	9f 5f       	subi	r25, 0xFF	; 255
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	44 1f       	adc	r20, r20
 30c:	aa 1f       	adc	r26, r26
 30e:	a9 f3       	breq	.-22     	; 0x2fa <__divsf3_pse+0x10>
 310:	35 d0       	rcall	.+106    	; 0x37c <__divsf3_pse+0x92>
 312:	0e 2e       	mov	r0, r30
 314:	3a f0       	brmi	.+14     	; 0x324 <__divsf3_pse+0x3a>
 316:	e0 e8       	ldi	r30, 0x80	; 128
 318:	32 d0       	rcall	.+100    	; 0x37e <__divsf3_pse+0x94>
 31a:	91 50       	subi	r25, 0x01	; 1
 31c:	50 40       	sbci	r21, 0x00	; 0
 31e:	e6 95       	lsr	r30
 320:	00 1c       	adc	r0, r0
 322:	ca f7       	brpl	.-14     	; 0x316 <__divsf3_pse+0x2c>
 324:	2b d0       	rcall	.+86     	; 0x37c <__divsf3_pse+0x92>
 326:	fe 2f       	mov	r31, r30
 328:	29 d0       	rcall	.+82     	; 0x37c <__divsf3_pse+0x92>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	88 1f       	adc	r24, r24
 330:	bb 1f       	adc	r27, r27
 332:	26 17       	cp	r18, r22
 334:	37 07       	cpc	r19, r23
 336:	48 07       	cpc	r20, r24
 338:	ab 07       	cpc	r26, r27
 33a:	b0 e8       	ldi	r27, 0x80	; 128
 33c:	09 f0       	breq	.+2      	; 0x340 <__divsf3_pse+0x56>
 33e:	bb 0b       	sbc	r27, r27
 340:	80 2d       	mov	r24, r0
 342:	bf 01       	movw	r22, r30
 344:	ff 27       	eor	r31, r31
 346:	93 58       	subi	r25, 0x83	; 131
 348:	5f 4f       	sbci	r21, 0xFF	; 255
 34a:	3a f0       	brmi	.+14     	; 0x35a <__divsf3_pse+0x70>
 34c:	9e 3f       	cpi	r25, 0xFE	; 254
 34e:	51 05       	cpc	r21, r1
 350:	78 f0       	brcs	.+30     	; 0x370 <__divsf3_pse+0x86>
 352:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__fp_inf>
 356:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 35a:	5f 3f       	cpi	r21, 0xFF	; 255
 35c:	e4 f3       	brlt	.-8      	; 0x356 <__divsf3_pse+0x6c>
 35e:	98 3e       	cpi	r25, 0xE8	; 232
 360:	d4 f3       	brlt	.-12     	; 0x356 <__divsf3_pse+0x6c>
 362:	86 95       	lsr	r24
 364:	77 95       	ror	r23
 366:	67 95       	ror	r22
 368:	b7 95       	ror	r27
 36a:	f7 95       	ror	r31
 36c:	9f 5f       	subi	r25, 0xFF	; 255
 36e:	c9 f7       	brne	.-14     	; 0x362 <__divsf3_pse+0x78>
 370:	88 0f       	add	r24, r24
 372:	91 1d       	adc	r25, r1
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	bb 1f       	adc	r27, r27
 386:	62 17       	cp	r22, r18
 388:	73 07       	cpc	r23, r19
 38a:	84 07       	cpc	r24, r20
 38c:	ba 07       	cpc	r27, r26
 38e:	20 f0       	brcs	.+8      	; 0x398 <__divsf3_pse+0xae>
 390:	62 1b       	sub	r22, r18
 392:	73 0b       	sbc	r23, r19
 394:	84 0b       	sbc	r24, r20
 396:	ba 0b       	sbc	r27, r26
 398:	ee 1f       	adc	r30, r30
 39a:	88 f7       	brcc	.-30     	; 0x37e <__divsf3_pse+0x94>
 39c:	e0 95       	com	r30
 39e:	08 95       	ret

000003a0 <__fixunssfsi>:
 3a0:	0e 94 90 02 	call	0x520	; 0x520 <__fp_splitA>
 3a4:	88 f0       	brcs	.+34     	; 0x3c8 <__fixunssfsi+0x28>
 3a6:	9f 57       	subi	r25, 0x7F	; 127
 3a8:	98 f0       	brcs	.+38     	; 0x3d0 <__fixunssfsi+0x30>
 3aa:	b9 2f       	mov	r27, r25
 3ac:	99 27       	eor	r25, r25
 3ae:	b7 51       	subi	r27, 0x17	; 23
 3b0:	b0 f0       	brcs	.+44     	; 0x3de <__fixunssfsi+0x3e>
 3b2:	e1 f0       	breq	.+56     	; 0x3ec <__fixunssfsi+0x4c>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a f0       	brmi	.+6      	; 0x3c4 <__fixunssfsi+0x24>
 3be:	ba 95       	dec	r27
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__fixunssfsi+0x14>
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <__fixunssfsi+0x4c>
 3c4:	b1 30       	cpi	r27, 0x01	; 1
 3c6:	91 f0       	breq	.+36     	; 0x3ec <__fixunssfsi+0x4c>
 3c8:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_zero>
 3cc:	b1 e0       	ldi	r27, 0x01	; 1
 3ce:	08 95       	ret
 3d0:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_zero>
 3d4:	67 2f       	mov	r22, r23
 3d6:	78 2f       	mov	r23, r24
 3d8:	88 27       	eor	r24, r24
 3da:	b8 5f       	subi	r27, 0xF8	; 248
 3dc:	39 f0       	breq	.+14     	; 0x3ec <__fixunssfsi+0x4c>
 3de:	b9 3f       	cpi	r27, 0xF9	; 249
 3e0:	cc f3       	brlt	.-14     	; 0x3d4 <__fixunssfsi+0x34>
 3e2:	86 95       	lsr	r24
 3e4:	77 95       	ror	r23
 3e6:	67 95       	ror	r22
 3e8:	b3 95       	inc	r27
 3ea:	d9 f7       	brne	.-10     	; 0x3e2 <__fixunssfsi+0x42>
 3ec:	3e f4       	brtc	.+14     	; 0x3fc <__fixunssfsi+0x5c>
 3ee:	90 95       	com	r25
 3f0:	80 95       	com	r24
 3f2:	70 95       	com	r23
 3f4:	61 95       	neg	r22
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	8f 4f       	sbci	r24, 0xFF	; 255
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__floatunsisf>:
 3fe:	e8 94       	clt
 400:	09 c0       	rjmp	.+18     	; 0x414 <__floatsisf+0x12>

00000402 <__floatsisf>:
 402:	97 fb       	bst	r25, 7
 404:	3e f4       	brtc	.+14     	; 0x414 <__floatsisf+0x12>
 406:	90 95       	com	r25
 408:	80 95       	com	r24
 40a:	70 95       	com	r23
 40c:	61 95       	neg	r22
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8f 4f       	sbci	r24, 0xFF	; 255
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	99 23       	and	r25, r25
 416:	a9 f0       	breq	.+42     	; 0x442 <__floatsisf+0x40>
 418:	f9 2f       	mov	r31, r25
 41a:	96 e9       	ldi	r25, 0x96	; 150
 41c:	bb 27       	eor	r27, r27
 41e:	93 95       	inc	r25
 420:	f6 95       	lsr	r31
 422:	87 95       	ror	r24
 424:	77 95       	ror	r23
 426:	67 95       	ror	r22
 428:	b7 95       	ror	r27
 42a:	f1 11       	cpse	r31, r1
 42c:	f8 cf       	rjmp	.-16     	; 0x41e <__floatsisf+0x1c>
 42e:	fa f4       	brpl	.+62     	; 0x46e <__floatsisf+0x6c>
 430:	bb 0f       	add	r27, r27
 432:	11 f4       	brne	.+4      	; 0x438 <__floatsisf+0x36>
 434:	60 ff       	sbrs	r22, 0
 436:	1b c0       	rjmp	.+54     	; 0x46e <__floatsisf+0x6c>
 438:	6f 5f       	subi	r22, 0xFF	; 255
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	16 c0       	rjmp	.+44     	; 0x46e <__floatsisf+0x6c>
 442:	88 23       	and	r24, r24
 444:	11 f0       	breq	.+4      	; 0x44a <__floatsisf+0x48>
 446:	96 e9       	ldi	r25, 0x96	; 150
 448:	11 c0       	rjmp	.+34     	; 0x46c <__floatsisf+0x6a>
 44a:	77 23       	and	r23, r23
 44c:	21 f0       	breq	.+8      	; 0x456 <__floatsisf+0x54>
 44e:	9e e8       	ldi	r25, 0x8E	; 142
 450:	87 2f       	mov	r24, r23
 452:	76 2f       	mov	r23, r22
 454:	05 c0       	rjmp	.+10     	; 0x460 <__floatsisf+0x5e>
 456:	66 23       	and	r22, r22
 458:	71 f0       	breq	.+28     	; 0x476 <__floatsisf+0x74>
 45a:	96 e8       	ldi	r25, 0x86	; 134
 45c:	86 2f       	mov	r24, r22
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	2a f0       	brmi	.+10     	; 0x46e <__floatsisf+0x6c>
 464:	9a 95       	dec	r25
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	da f7       	brpl	.-10     	; 0x464 <__floatsisf+0x62>
 46e:	88 0f       	add	r24, r24
 470:	96 95       	lsr	r25
 472:	87 95       	ror	r24
 474:	97 f9       	bld	r25, 7
 476:	08 95       	ret

00000478 <__fp_cmp>:
 478:	99 0f       	add	r25, r25
 47a:	00 08       	sbc	r0, r0
 47c:	55 0f       	add	r21, r21
 47e:	aa 0b       	sbc	r26, r26
 480:	e0 e8       	ldi	r30, 0x80	; 128
 482:	fe ef       	ldi	r31, 0xFE	; 254
 484:	16 16       	cp	r1, r22
 486:	17 06       	cpc	r1, r23
 488:	e8 07       	cpc	r30, r24
 48a:	f9 07       	cpc	r31, r25
 48c:	c0 f0       	brcs	.+48     	; 0x4be <__fp_cmp+0x46>
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	e4 07       	cpc	r30, r20
 494:	f5 07       	cpc	r31, r21
 496:	98 f0       	brcs	.+38     	; 0x4be <__fp_cmp+0x46>
 498:	62 1b       	sub	r22, r18
 49a:	73 0b       	sbc	r23, r19
 49c:	84 0b       	sbc	r24, r20
 49e:	95 0b       	sbc	r25, r21
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__fp_cmp+0x38>
 4a2:	0a 26       	eor	r0, r26
 4a4:	61 f0       	breq	.+24     	; 0x4be <__fp_cmp+0x46>
 4a6:	23 2b       	or	r18, r19
 4a8:	24 2b       	or	r18, r20
 4aa:	25 2b       	or	r18, r21
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <__fp_cmp+0x3e>
 4ae:	08 95       	ret
 4b0:	0a 26       	eor	r0, r26
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <__fp_cmp+0x3e>
 4b4:	a1 40       	sbci	r26, 0x01	; 1
 4b6:	a6 95       	lsr	r26
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	81 1d       	adc	r24, r1
 4bc:	81 1d       	adc	r24, r1
 4be:	08 95       	ret

000004c0 <__fp_inf>:
 4c0:	97 f9       	bld	r25, 7
 4c2:	9f 67       	ori	r25, 0x7F	; 127
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	08 95       	ret

000004cc <__fp_nan>:
 4cc:	9f ef       	ldi	r25, 0xFF	; 255
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	08 95       	ret

000004d2 <__fp_pscA>:
 4d2:	00 24       	eor	r0, r0
 4d4:	0a 94       	dec	r0
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	09 06       	cpc	r0, r25
 4de:	08 95       	ret

000004e0 <__fp_pscB>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	05 06       	cpc	r0, r21
 4ec:	08 95       	ret

000004ee <__fp_round>:
 4ee:	09 2e       	mov	r0, r25
 4f0:	03 94       	inc	r0
 4f2:	00 0c       	add	r0, r0
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__fp_round+0xc>
 4f6:	88 23       	and	r24, r24
 4f8:	52 f0       	brmi	.+20     	; 0x50e <__fp_round+0x20>
 4fa:	bb 0f       	add	r27, r27
 4fc:	40 f4       	brcc	.+16     	; 0x50e <__fp_round+0x20>
 4fe:	bf 2b       	or	r27, r31
 500:	11 f4       	brne	.+4      	; 0x506 <__fp_round+0x18>
 502:	60 ff       	sbrs	r22, 0
 504:	04 c0       	rjmp	.+8      	; 0x50e <__fp_round+0x20>
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
