
Midterm2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011a  0080011a  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3c  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8f  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  00002043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  000027a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ea  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_1>
   8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_2>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_10>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_32>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_42>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e9       	ldi	r30, 0x90	; 144
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 31       	cpi	r26, 0x1A	; 26
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e1       	ldi	r26, 0x1A	; 26
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 04 02 	call	0x408	; 0x408 <main>
  ea:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <initializeUART>:
{
	uint16_t x = adcRead();
	float adcVal = ((x)*(110.0/1023.0));
	snprintf(array,sizeof(array), "%f\r\n", adcVal);
	USART_tx(array);
	return;
  f2:	50 9a       	sbi	0x0a, 0	; 10
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 100:	e2 ec       	ldi	r30, 0xC2	; 194
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <startADC>:
 10c:	50 98       	cbi	0x0a, 0	; 10
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 114:	87 ea       	ldi	r24, 0xA7	; 167
 116:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 120:	08 95       	ret

00000122 <USART_tx_transmit>:
 122:	87 e6       	ldi	r24, 0x67	; 103
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 12a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 12e:	e1 ec       	ldi	r30, 0xC1	; 193
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 64       	ori	r24, 0x48	; 72
 136:	80 83       	st	Z, r24
 138:	50 9a       	sbi	0x0a, 0	; 10
 13a:	08 95       	ret

0000013c <USART_tx>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	fc 01       	movw	r30, r24
 142:	20 81       	ld	r18, Z
 144:	22 23       	and	r18, r18
 146:	69 f0       	breq	.+26     	; 0x162 <USART_tx+0x26>
 148:	dc 01       	movw	r26, r24
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	e0 ec       	ldi	r30, 0xC0	; 192
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	c6 ec       	ldi	r28, 0xC6	; 198
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	90 81       	ld	r25, Z
 156:	95 ff       	sbrs	r25, 5
 158:	fd cf       	rjmp	.-6      	; 0x154 <USART_tx+0x18>
 15a:	28 83       	st	Y, r18
 15c:	2d 91       	ld	r18, X+
 15e:	21 11       	cpse	r18, r1
 160:	f9 cf       	rjmp	.-14     	; 0x154 <USART_tx+0x18>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <motorDirection>:
}

void motorDirection()	//invert current direction of motor
{						//by reversing H-Bridge config

	PORTB ^= (1<<3);
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	89 27       	eor	r24, r25
 16e:	85 b9       	out	0x05, r24	; 5
	PORTB ^= (1<<4);
 170:	95 b1       	in	r25, 0x05	; 5
 172:	80 e1       	ldi	r24, 0x10	; 16
 174:	89 27       	eor	r24, r25
 176:	85 b9       	out	0x05, r24	; 5
 178:	08 95       	ret

0000017a <initializeTimer0>:
}


void initializeTimer0() 						//PWM timer
{
	TCCR0A |= (1<<COM0A1) | (1<<WGM00);			//non-inverting, Fast PWM
 17a:	84 b5       	in	r24, 0x24	; 36
 17c:	81 68       	ori	r24, 0x81	; 129
 17e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02) | (1<<CS02);
 180:	85 b5       	in	r24, 0x25	; 37
 182:	8c 60       	ori	r24, 0x0C	; 12
 184:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);						//enable interrupts
 186:	ee e6       	ldi	r30, 0x6E	; 110
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
	TCNT0 = 0x00;
 190:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x00;
 192:	17 bc       	out	0x27, r1	; 39
 194:	08 95       	ret

00000196 <initializeTimer1>:
}

void initializeTimer1()											//RPMx4
{
	DDRD &= ~(1<<7);
 196:	57 98       	cbi	0x0a, 7	; 10
	TCNT1 = 0x00;
 198:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 19c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TCCR1B |= (1<<FOC4B) | (1<<CS32) | (1<<CS31) | (1<<CS30);	//set CTC mode and prescalar of 64
 1a0:	e1 e8       	ldi	r30, 0x81	; 129
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	87 64       	ori	r24, 0x47	; 71
 1a8:	80 83       	st	Z, r24
	TIMSK1 |= (1<<ICIE1);
 1aa:	ef e6       	ldi	r30, 0x6F	; 111
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <initializeTimer3>:

}

void initializeTimer3()											//RPMx1 & RPMx2 & RPMx4
{
	DDRD &= ~(1<<6);
 1b6:	56 98       	cbi	0x0a, 6	; 10
	TCNT3 = 0x00;												//initialize timer3
 1b8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 1bc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	TCCR3B |= (1<<FOC4B) | (1<<CS32) | (1<<CS31) | (1<<CS30); 	//Set counter4 as rising edge
 1c0:	e1 e9       	ldi	r30, 0x91	; 145
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	87 64       	ori	r24, 0x47	; 71
 1c8:	80 83       	st	Z, r24
	TIMSK3 |= (1<<ICIE3); 										//set input compare interrupt
 1ca:	e1 e7       	ldi	r30, 0x71	; 113
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <initializeTimer4>:
	
}

void initializeTimer4()								//ADC sampling delay timer
{
	TCNT4 = 0x00;  									//initialize timer
 1d6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__DATA_REGION_ORIGIN__+0x45>
 1da:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__DATA_REGION_ORIGIN__+0x44>
	TCCR4B |= (1<<WGM42) | (1<<CS41) | (1<<CS40); 	//set CTC mode and prescalar of 64
 1de:	e1 ea       	ldi	r30, 0xA1	; 161
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8b 60       	ori	r24, 0x0B	; 11
 1e6:	80 83       	st	Z, r24
	TIMSK4 |= (1<<OCIE4A); 							//set output compare interrupt
 1e8:	e2 e7       	ldi	r30, 0x72	; 114
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	80 83       	st	Z, r24
	OCR4A  = 24999; 								//100ms in cycles
 1f2:	87 ea       	ldi	r24, 0xA7	; 167
 1f4:	91 e6       	ldi	r25, 0x61	; 97
 1f6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__DATA_REGION_ORIGIN__+0x49>
 1fa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__DATA_REGION_ORIGIN__+0x48>
 1fe:	08 95       	ret

00000200 <RPMx1>:



void RPMx1()
{
	initializeTimer3();				//run counter
 200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initializeTimer3>
	initializeTimer4();				//run delay (100ms)
 204:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initializeTimer4>
	delay1 = true; 					//set flag for while loop below
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <delay1>
	
	while(delay1); 					//collect data until delay is finished
 20e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <delay1>
 212:	81 11       	cpse	r24, r1
 214:	fc cf       	rjmp	.-8      	; 0x20e <RPMx1+0xe>
	
	PORTD &= ~(1<<4); 				//Reset Software Interrupt
 216:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1<<5); 				//Reset Software Interrupt
 218:	5d 98       	cbi	0x0b, 5	; 11
	//TCCR3B &= ~(0x07); 				//reset timers
	//TCCR4B &= ~(0x07);
	
	return (float)(RPMx4_Value * (60.0/96.0)); //convert given value to rpm
 21a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 21e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 222:	08 95       	ret

00000224 <__vector_1>:
	OCR4A  = 24999; 								//100ms in cycles
	
}

ISR(INT0_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	if(delay1)
 236:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <delay1>
 23a:	88 23       	and	r24, r24
 23c:	31 f0       	breq	.+12     	; 0x24a <__vector_1+0x26>
	{
		TCCR3B ^= (CS31);		//switch edge trigger
 23e:	e1 e9       	ldi	r30, 0x91	; 145
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	89 27       	eor	r24, r25
 248:	80 83       	st	Z, r24
	}
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_2>:

ISR(INT1_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if(delay2)
 26e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <delay2>
 272:	88 23       	and	r24, r24
 274:	31 f0       	breq	.+12     	; 0x282 <__vector_2+0x26>
	{
		TCCR1B ^= (CS11);		//switch edge trigger
 276:	e1 e8       	ldi	r30, 0x81	; 129
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	90 81       	ld	r25, Z
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 27       	eor	r24, r25
 280:	80 83       	st	Z, r24
	}
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_16>:

ISR(TIMER0_OVF_vect)			//PWM interrupt subroutine
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	ADCSRA |= (1<<ADIE);		//set ADC interrupt
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	80 83       	st	Z, r24
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_10>:

ISR(TIMER1_CAPT_vect)			//RPMx4 interrupt subroutine
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	TIMSK1 &= ~(1U<<ICIE1);		//reset interrupt
 2d0:	ef e6       	ldi	r30, 0x6F	; 111
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 7d       	andi	r24, 0xDF	; 223
 2d8:	80 83       	st	Z, r24
	delay2 = false;				//change delay condition to enable calculations
 2da:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <delay2>
	RPMx1_Value = (float) ICR1;	//store value from input data
 2de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 2e2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 2e6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <RPMx1_Value+0x1>
 2ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <RPMx1_Value>
	delay1 = false;				//change flag for calculation enable
 2ee:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <delay1>
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_32>:

ISR(TIMER3_CAPT_vect)			//RPMx1 & RPMx2 & RPMx4 interrupt subroutine
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	TIMSK3 &= ~(1<<ICIE3);		//reset interrupt
 316:	e1 e7       	ldi	r30, 0x71	; 113
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	80 83       	st	Z, r24
	delay1 = false;				//change delay condition to enable calculations
 320:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <delay1>
	RPMx4_Value = (float) ICR3;	//store value from input data
 324:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__DATA_REGION_ORIGIN__+0x36>
 328:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__DATA_REGION_ORIGIN__+0x37>
 32c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 330:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
	delay2 = false;									//change flag for calculation enable
 334:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <delay2>
}
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	8f 93       	push	r24
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	TIMSK3 &= ~(TOIE0);
 35a:	e1 e7       	ldi	r30, 0x71	; 113
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 83       	st	Z, r24
	PORTC |= (1<<4); 			//Sets Timer4 Capture Interrupt
 362:	44 9a       	sbi	0x08, 4	; 8
	if(delay2)
 364:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <delay2>
 368:	81 11       	cpse	r24, r1
	{
		PORTC |= (1<<5);		//Sets timer1 capture interrupt if RPMx1 is requested
 36a:	45 9a       	sbi	0x08, 5	; 8
	}
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <disableTrigger>:

void disableTrigger()
{
	EIMSK = 0x00;					//disable INT1 interrupt
 37c:	1d ba       	out	0x1d, r1	; 29
	EICRA = 0x00;					//disable external interrupt
 37e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 382:	08 95       	ret

00000384 <RPMx2>:
	return (float)(RPMx4_Value * (60.0/96.0)); //convert given value to rpm
}

void RPMx2()
{
	initializeTimer3();				//run counter
 384:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initializeTimer3>
	initializeTimer4();				//run delay (100ms)
 388:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initializeTimer4>
	EIMSK |= (1<<INT1); 			//set INT1 to handle interrupt for data collection
 38c:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1<<ISC01) ; 			//enable external interrupt on falling edge
 38e:	e9 e6       	ldi	r30, 0x69	; 105
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
	delay1 = true; 					//set flag for while loop below
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <delay1>
	
	while(delay1); 					//collect data until delay is finished
 39e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <delay1>
 3a2:	81 11       	cpse	r24, r1
 3a4:	fc cf       	rjmp	.-8      	; 0x39e <RPMx2+0x1a>
	
	disableTrigger();				//disable external interrupt
 3a6:	0e 94 be 01 	call	0x37c	; 0x37c <disableTrigger>
	PORTD &= ~(1<<4); 				//Reset Software Interrupt
 3aa:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1<<5); 				//Reset Software Interrupt
 3ac:	5d 98       	cbi	0x0b, 5	; 11
	//TCCR3B &= ~(0x07); 				//reset timers
	//TCCR4B &= ~(0x07);
	
	return (float)(RPMx4_Value * (60.0)/(192.0)); //convert given value to rpm
 3ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 3b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 3b6:	08 95       	ret

000003b8 <RPMx4>:
}

void RPMx4()
{
	initializeTimer1();					//run counter 1
 3b8:	0e 94 cb 00 	call	0x196	; 0x196 <initializeTimer1>
	initializeTimer3();					//run counter 2
 3bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initializeTimer3>
	initializeTimer4();					//run delay (100ms)
 3c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initializeTimer4>
	EIMSK |= (1<<INT1) | (1<<INT0); 	//set INT0/1 to handle interrupt for data collection
 3c4:	8d b3       	in	r24, 0x1d	; 29
 3c6:	83 60       	ori	r24, 0x03	; 3
 3c8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC11) | (1<<ISC00); 	//enable external interrupt on falling edge
 3ca:	e9 e6       	ldi	r30, 0x69	; 105
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	89 60       	ori	r24, 0x09	; 9
 3d2:	80 83       	st	Z, r24
	delay1 = true; 			//set flag for while loop below
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <delay1>
	delay2 = true;
 3da:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <delay2>
	while(delay1 || delay2); 			//collect data until delay is finished
 3de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <delay1>
 3e2:	81 11       	cpse	r24, r1
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <RPMx4+0x26>
 3e6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <delay2>
 3ea:	81 11       	cpse	r24, r1
 3ec:	f8 cf       	rjmp	.-16     	; 0x3de <RPMx4+0x26>
	disableTrigger();					//disable external interrupt
 3ee:	0e 94 be 01 	call	0x37c	; 0x37c <disableTrigger>
	PORTD &= ~(1<<4);
 3f2:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1<<5);
 3f4:	5d 98       	cbi	0x0b, 5	; 11

	//TCCR3B &= ~(0x07); 					//reset timers used
	//TCCR1B &= ~(0x07 | (1U<<6));
	//TCCR4B &= ~(0x07 | (1U<<6));

	return (float)((RPMx1_Value + RPMx4_Value) * (60.0)/(384.0)); //convert given value to rpm
 3f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <RPMx1_Value>
 3fa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <RPMx1_Value+0x1>
 3fe:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 402:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 406:	08 95       	ret

00000408 <main>:
	PORTB ^= (1<<4);
}

int main()
{
	startADC();				//initialize functions above
 408:	0e 94 86 00 	call	0x10c	; 0x10c <startADC>
	USART_tx_transmit();
 40c:	0e 94 91 00 	call	0x122	; 0x122 <USART_tx_transmit>
	initializeUART();
 410:	0e 94 79 00 	call	0xf2	; 0xf2 <initializeUART>
	initializeTimer0();
 414:	0e 94 bd 00 	call	0x17a	; 0x17a <initializeTimer0>
	initializeTimer4();
 418:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initializeTimer4>
	sei();
 41c:	78 94       	sei
	
	DDRB |= (1<<3) | (1<<4);//set output ports used for motor direction
 41e:	84 b1       	in	r24, 0x04	; 4
 420:	88 61       	ori	r24, 0x18	; 24
 422:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<3);
 424:	2b 98       	cbi	0x05, 3	; 5
	PORTB |= (1<<4);
 426:	2c 9a       	sbi	0x05, 4	; 5
	
	DDRD &= ~(1<<2);		//set INT0
 428:	52 98       	cbi	0x0a, 2	; 10
	PORTD &= ~(1<<2);
 42a:	5a 98       	cbi	0x0b, 2	; 11
	DDRD &= ~(1<<3);		//set INT1
 42c:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(1<<3);
 42e:	5b 98       	cbi	0x0b, 3	; 11
	DDRD |= (1<<4);			//input capture 1
 430:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~(1<<4);
 432:	5c 98       	cbi	0x0b, 4	; 11
	DDRD |= (1<<5);			//input capture 2
 434:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~(1<<5);
 436:	5d 98       	cbi	0x0b, 5	; 11
	
	
	while(1)
	{
		USART_tx("RPMx1:");
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
		RPMx1();
 440:	0e 94 00 01 	call	0x200	; 0x200 <RPMx1>
		USART_tx("\n");
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
		USART_tx("RPMx2:");
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
		RPMx2();
 454:	0e 94 c2 01 	call	0x384	; 0x384 <RPMx2>
		USART_tx("\n");
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
		USART_tx("RPMx4:");
 460:	83 e1       	ldi	r24, 0x13	; 19
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
		RPMx4();
 468:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <RPMx4>
		USART_tx("\n");
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	8b e7       	ldi	r24, 0x7B	; 123
 478:	92 e9       	ldi	r25, 0x92	; 146
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <main+0x72>
 482:	00 c0       	rjmp	.+0      	; 0x484 <main+0x7c>
 484:	00 00       	nop
		_delay_ms(3000);
		motorDirection();
 486:	0e 94 b4 00 	call	0x168	; 0x168 <motorDirection>
 48a:	d6 cf       	rjmp	.-84     	; 0x438 <main+0x30>

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
